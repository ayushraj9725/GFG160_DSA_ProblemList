Problem : Sort the given array after applying the given equation

Problem Statement :
Given an integer array arr[] sorted in ascending order, along with three integers: A, B, and C. The task is to transform each element x in the array using the quadratic function A*(x2) + B*x + C. After applying this transformation to every element, return the modified array in sorted order.

Examples:

Input: arr[] = [-4, -2, 0, 2, 4], A = 1, B = 3, C = 5
Output: [3, 5, 9, 15, 33]
Explanation: After applying f(x) = 1*(x2)+ 3*x + 5 to each x, we get [9, 3, 5, 15, 33]. After sorting this array, the array becomes [3, 5, 9, 15, 33].

Input: arr[] = [-3, -1, 2, 4], A = -1, B = 0, C = 0
Output: [-16, -9, -4, -1]
Explanation: After applying f(x) = -1*(x2) + 0*x + 0 to each x, we get [ -9, -1, -4, -16 ]. After sorting this array, the array becomes  [-16, -9, -4, -1].

Constraints:
1 ≤ arr.size() ≤ 106
-103 ≤ arr[i], A, B, C ≤ 103

Expected Complexities
Time Complexity : O(n)
Auxiliary Space : O(n)

Company Tags
Adobe


/***********************************************************************    SOLUTIONS   ******************************************************************************/

///////////////// BRUTE FORCE SOLUTION ///////////////////   TIME  = > O(n logn)  with space  : O(N)

class Solution {
  public:
    int calculate(int x , int A , int B, int C){
        return (A * x * x) + (B * x) + C ;
    }
    vector<int> sortArray(vector<int> &arr, int A, int B, int C) {
        // code here
        int n = arr.size();
        vector<int> ans ;

        for(int i =0 ; i<n ; i++){
            int x = arr[i];
            int r = calculate(x,A,B,C);
            ans.push_back(r);
        }
        
        sort(ans.begin(),ans.end());
        
        return ans ;
    }
};



////////////////  BETTER FORCE SOLUTION ///////////////////     : TIME  = > O(n logn)  with space  : O(1)

class Solution {
  public:
    int calculate(int x , int A , int B, int C){
        return (A * x * x) + (B * x) + C ;
    }
    vector<int> sortArray(vector<int> &arr, int A, int B, int C) {
        // code here
        int n = arr.size();
        
        for(int i =0 ; i<n ; i++){
            int x = arr[i];
            int r = calculate(x,A,B,C);
            arr[i] = r ;
        }
        
        sort(arr.begin(),arr.end());
        
        return arr ;
    }
};


////////////////  OPTIMAL SOLUTION  //////////////////////     : TIME => O(N)    and   SPACE => O(N)  


int evaluate(int x, int A, int B, int C) {
    return A * x * x + B * x + C;
}

// Function to transform and sort the array 
vector<int> sortArray(vector<int> &arr, int A, int B, int C) {
    int n = arr.size();
    vector<int> newArr(n);

    int left = 0, right = n - 1;
    int index = (A >= 0) ? n - 1 : 0;

    // Two-pointer approach to fill newArr 
    while (left <= right) {
        int leftVal = evaluate(arr[left], A, B, C);
        int rightVal = evaluate(arr[right], A, B, C);

        if (A >= 0) {
            if (leftVal > rightVal) {
                newArr[index--] = leftVal;
                left++;
            } else {
                newArr[index--] = rightVal;
                right--;
            }
        } else {
            if (leftVal < rightVal) {
                newArr[index++] = leftVal;
                left++;
            } else {
                newArr[index++] = rightVal;
                right--;
            }
        }
    }

    return newArr;
}

int main() {
    vector<int> arr = {-4, -2, 0, 2, 4};
    int A = 1, B = 3, C = 5;

    vector<int> res = sortArray(arr, A, B, C);

    for (int val : res) {
        cout << val << " ";
    }

    return 0;
}
