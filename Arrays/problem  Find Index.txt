problem : Find Index


Problem statement :
Given an unsorted array arr[] of integers and a key which is present in this array. You need to write a program to find the start index( index where the element is first found from left in the array ) and end index( index where the element is first found from right in the array ) return an array of length 2 with elements start index and end index.(0 based indexing is used)

If the key does not exist in the array then return -1 for both start and end index in this case.

Examples:

Input: arr[] = [1, 2, 3, 4, 5, 5] , key = 5
Output:  [4, 5]
Explanation: 5 appears first time at index 4 and appears last time at index 5(0 based indexing)

Input: arr = [6, 5, 4, 3, 1, 2] , key = 4
Output: [2, 2]
Explanation: 4 appears first time and last time at index 2.

Input: arr = [7, 8, 6] , key = 2
Output: [-1, -1]
Explanation: Since 2 does not appear in the array, we will return -1 for both the start and end indices..


Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1).

Constraints:
1 ≤ arr.size ≤ 106
1 <= arr[i] , key <= 109 



/**************************************************************************   SOLUTIONS ****************************************************************************/

class Solution {
  public:
    vector<int> findIndex(vector<int>& arr, int key) {
        // code here.
        vector<int> ans(2,-1) ; 
        
        int n = arr.size() ;
        int ind = -1 ;
        
        for(int i = 0; i < n ; i++){
            if(arr[i] == key){
                ind = i ;
                ans[0] = ind ;
                break;
            }
        }
        for(int i = ind+1 ; i < n ;i++){
            if(arr[i] == key){
                ans[1] = i ;
            }
        }
        
        if(ans[1] == -1) ans[1] = ans[0] ;
        
        return ans ;
        
    }
};


