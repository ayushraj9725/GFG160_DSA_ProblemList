Problem : N - Queen 

Problem  Link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/recursion-and-backtracking-gfg-160/problem/n-queen-problem0315

Problem Statement : 
The n-queens puzzle is the problem of placing n queens on a (n × n) chessboard such that no two queens can attack each other. Note that two queens attack each other if they are placed on the same row, the same column, or the same diagonal.

Given an integer n, find all distinct solutions to the n-queens puzzle.
You can return your answer in any order but each solution should represent a distinct board configuration of the queen placements, where the solutions are represented as permutations of [1, 2, 3, ..., n]. In this representation, the number in the ith position denotes the row in which the queen is placed in the ith column.
For eg. below figure represents a chessboard [3 1 4 2].



Examples:

Input: n = 1
Output: [1]
Explaination: Only one queen can be placed in the single cell available.

Input: n = 4
Output: [[2 4 1 3 ] [3 1 4 2 ]]
Explaination: There are 2 possible solutions for n = 4.

Input: n = 2
Output: []
Explaination: There are no possible solutions for n = 2.
//////////////////////////////
Constraints:
1 ≤ n ≤ 10
//////////////////////////////
Company Tags
Accolite Amazon Microsoft D-E-Shaw Visa MAQ Software Amdocs Twitter 

/ ************************************************* SOLUTIONS *************************************************************************/

class Solution {
  public:
    
    void solve(int colo , int n , vector<vector<int>> &ans , vector<int> &sol ,vector<bool> &col , vector<bool> &ldiag, vector<bool> &rdiag)
    {
        for(int i = 0 ; i < n ; i++){
            if(colo == n){
                ans.push_back(sol);
                return ;
            }
         
            if(!col[i] && !ldiag[colo-i+n-1] && !rdiag[i+colo]){
                sol.push_back(i+1);
                col[i] = true ;
                ldiag[colo-i+n-1] = true ;
                rdiag[i+colo] = true ;
                
                solve(colo+1,n,ans,sol,col,ldiag,rdiag); // recursive called here 
                
                // now we do here backtracking
                
                sol.pop_back();
                col[i] = false ;
                ldiag[colo-i+n-1] = false ;
                rdiag[i+colo] = false ;
                
            }
        }
    }
    vector<vector<int>> nQueen(int n) {
        // code here
        vector<bool> col(n,false) ;
        vector<bool> ldiag(2*n-1,false);
        vector<bool> rdiag(2*n-1,false);
        vector<vector<int>> ans ;
        vector<int> sol ;
        solve(0,n,ans,sol,col,ldiag,rdiag);
        return ans ; // now we return the answr heer after calling returning 
        
    }
};

/******************************************************** JAVA PROBLEM LEETCODE HERE CPP **********************************************/

