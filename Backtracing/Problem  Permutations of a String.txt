Problem : Permutations of a String

Problem link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/recursion-and-backtracking-gfg-160/problem/permutations-of-a-given-string2041

Problem Statement : 
Given a string s, which may contain duplicate characters, your task is to generate and return an array of all unique permutations of the string. You can return your answer in any order.

Examples:

Input: s = "ABC"
Output: ["ABC", "ACB", "BAC", "BCA", "CAB", "CBA"]
Explanation: Given string ABC has 6 unique permutations.
Input: s = "ABSG"
Output: ["ABGS", "ABSG", "AGBS", "AGSB", "ASBG", "ASGB", "BAGS", "BASG", "BGAS", "BGSA", "BSAG", "BSGA", "GABS", "GASB", "GBAS", "GBSA", "GSAB", "GSBA", "SABG", "SAGB", "SBAG", "SBGA", "SGAB", "SGBA"]
Explanation: Given string ABSG has 24 unique permutations.
Input: s = "AAA"
Output: ["AAA"]
Explanation: No other unique permutations can be formed as all the characters are same.
Constraints:
1 <= s.size() <= 9
s contains only Uppercase english alphabets

Company Tags
Zoho Accolite Amazon Microsoft OYO Rooms Samsung Snapdeal Citrix Walmart MAQ Software Cisco 


/********************************************************************************** C++ CODE BRUTE FORCE *******************************/

class Solution {
 
   public:
   
    void recSolve(string &s , unordered_set<string> &ans ,int index){
            // base case
            int n = s.size() ;
  
            if(index >= n){
                ans.insert(s);
                
                return ;
            }
            for(int j = index ; j < n ; j++){    // if we write this for(int j = index ; j < n ; j++){ // then time limit exceeded 
                swap(s[index],s[j]);  // for swaping
                
                recSolve(s,ans,index+1); // here we are reursivly calling 
                
                swap(s[index],s[j]); // for backtracking 
            }
            
            
        }
    vector<string> findPermutation(string &s) {
        // Code here there
        // taking answer to store the all possible string 
        unordered_set<string> ans ;
        // taking that index , which helop me to iterate recursivly 
        
        int index = 0;
        // caaling that function which helps to performing the tasks here 
        recSolve(s,ans,index);
        
        return vector<string>(ans.begin(),ans.end()) ;
    }
};

/ ********************************************************* BRUTE FORCE C++ CODE ******************************************************/
//  WE ARE USING HERE EXTRA SPACE TO STROED THE TEMP RESULT IN ARRAY OR STRING  

class Solution {
 
   public:
   
    void recSolve(int i , int n , string &s , string &premu, unordered_set<string> &ans){
            // base case
            
            if(premu.size() == n){
                ans.insert(premu);
                
                return ;
            }
            for(int j = i ; j < n ; j++){
                swap(s[i],s[j]);  // for swaping
                premu.push_back(s[i]);
                recSolve(i+1,n,s,premu,ans); // here we are reursivly calling 
                premu.pop_back(); 
                swap(s[i],s[j]); // for backtracking 
            }
            
            
        }
    vector<string> findPermutation(string &s) {
        // Code here there
        // taking answer to store the all possible string 
        unordered_set<string> ans ;
        string premu ; // for holding the permutations of string currunt after made 
        int n = s.size() ;
        // caaling that function which helps to performing the tasks here
        recSolve(0,n,s,premu,ans);
        
        return vector<string>(ans.begin(),ans.end()) ;
    }
};

/****************************************************** JAVA CODE BRUTE FORCE   ****************************************************/
 problem :
Given an array nums of distinct integers, return all the possible 
permutations
. You can return the answer in any order.

LINK : https://leetcode.com/problems/permutations/description/?envType=problem-list-v2&envId=array

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]


Steps : We are looking for the generating all the possible permutations of particular string or given array  
       : In brute force we are taking a temp array or string to store the temp result each time when we call backtrack function using loop
       : that space using for holding the temp result : we can take LIST OR SET Data structure !




class Solution {
    private void backtrack(List<List<Integer>> ans , ArrayList<Integer> temp , int[] nums){
        // base cases 
         // if we get the temp size equal to the nums then we add temp into ans and return 
         if(temp.size() == nums.length){
            ans.add(new ArrayList<>(temp));
            return ;
         }
        for(int num : nums){
            //  we ignore the duplicate if same elment repeate then we don't care simple continue 
            if(temp.contains(num)) continue ;
            temp.add(num); // we are adding the current number from nums 
            backtrack(ans,temp,nums); //instant we go backtrack for removing those number which added recent 
            temp.remove(temp.size()-1); // last number in temp we are removing 
        }
    }
    public List<List<Integer>> permute(int[] nums) {
        // Brute force solution to generating all the permutations 
        List<List<Integer>> ans = new ArrayList<>();
        // Writing the function calling of backtracking 
        backtrack(ans, new ArrayList<Integer>() , nums); // passing all these holding temp result and final result and nums input 

        // return the ans here now 

        return ans ;
    }
}


/*****************************************************************************************************************************************/
    
