Problem : Word Search 

Problem Link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/recursion-and-backtracking-gfg-160/problem/word-search

Problem Statement : 
You are given a two-dimensional mat[][] of size n*m containing English alphabets and a string word. Check if the word exists on the mat. The word can be constructed by using letters from adjacent cells, either horizontally or vertically. The same cell cannot be used more than once.

Examples :

Input: mat[][] = [['T', 'E', 'E'], ['S', 'G', 'K'], ['T', 'E', 'L']], word = "GEEK"
Output: true
Explanation:
The letter cells which are used to construct the "GEEK" are colored.

Input: mat[][] = [['T', 'E', 'U'], ['S', 'G', 'K'], ['T', 'E', 'L']], word = "GEEK"
Output: false
Explanation:
It is impossible to construct the string word from the mat using each cell only once.

Input: mat[][] = [['A', 'B', 'A'], ['B', 'A', 'B']], word = "AB"
Output: true
Explanation:
There are multiple ways to construct the word "AB".

Constraints:
1 ≤ n, m ≤ 6
1 ≤ L ≤ 15
mat and word consists of only lowercase and uppercase English letters.

Company Tags
Amazon Microsoft Intuit Apple

Expected Complexities
Time Complexity :  O(n * m * 3^L)          Auxiliary Space :  O(n * m) 


/**************************************************** C++ CODE SOLUTION **************************************************************/


class Solution {
  public:
    bool solve(vector<vector<char>>& mat, string& word,int i , int j , int index ,vector<vector<bool>>& vis){
          // base case 
          if(index == word.size()) return true ; // if we see the idex get equal to the sixe of words given that mean we shoud return true  now 
          
          // Recursive case 
          if(i < 0 || j < 0 || i >= mat.size() || j >= mat[0].size() || vis[i][j] || mat[i][j] != word[index]) return false ; // if not found in adjecent then return false
          // make it visited mat true so in future we cant make for same element 
          vis[i][j] = true ;
          if(solve(mat,word,i - 1,j,index+1,vis) || solve(mat,word,i + 1,j,index+1,vis) || solve(mat,word,i,j - 1,index+1,vis) || solve(mat,word,i,j + 1,index+1,vis)){
              return true ;      
          }
          // if not return true then we will backtrack from here 
          vis[i][j] = false ; // make visited again false 
       // at the end if not return true it return false now 
       
       return false ;
    }
    bool isWordExist(vector<vector<char>>& mat, string& word) {
        // Code here
        
        int n = mat.size() ;
        int m = mat[0].size() ;
        vector<vector<bool>> vis(n,vector<bool>(m,false)); // this store the updated result if previous word found go for next then we need to check 
        int index = 0 ;
        
        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                if(mat[i][j] == word[0]){
                    if(solve(mat,word,i,j,index,vis)) return true ;
                }
            }
        }
        return false ;
    }
};
/***************************************************************************************************************************************/