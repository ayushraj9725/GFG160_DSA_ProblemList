Problem : Check if a given string is sum-string

Problem Statement : 

Given a string s consisting of digits, determine whether it can be classified as a sum-string.
A sum-string is a string that can be split into more than two non-empty substrings such that:
The rightmost substring is equal to the sum of the two substrings immediately before it (interpreted as integers).
This condition must apply recursively to the substrings before it.
The rightmost substring (and any number in the sum) must not contain leading zeroes, unless the number is exactly '0'.

Examples:

Input: s = "12243660"
Output: true
Explanation: The string can be split as {"12", "24", "36", "60"} where each number is the sum of the two before it:
36 = 12 + 24, and 60 = 24 + 36. Hence, it is a sum-string.

Input: s = "1111112223"
Output: true
Explanation: Split the string as {"1", "111", "112", "223"}, where:
112 = 1 + 111 and 223 = 111 + 112. Hence, it follows the sum-string rule.

Input: s = "123456"
Output: false
Explanation: There is no valid split of the string such that each part satisfies the sum-string property recursively.

Constraints:
1 ≤ s.size() ≤ 100
String consists of characters from '0' to '9'.

Expected Complexities
Time Complexity: O(n^3)
Auxiliary Space: O(n)

Company Tags
Nutanix

/**************************************************************************   SOLUTIONS  ****************************************************************************/



// C++ program to check if a string is a 
// sum-string using recursion
#include <iostream>
#include <string>
using namespace std;

// Adds two numeric strings and returns
// the sum as string
string addStrings(string num1, string num2) {
    if (num1.length() < num2.length()) {
        swap(num1, num2);
    }

    int len1 = num1.length();
    int len2 = num2.length();
    string sum = "";
    int carry = 0;

    // Add from least significant digits
    for (int i = 0; i < len2; i++) {
        int d1 = num1[len1 - 1 - i] - '0';
        int d2 = num2[len2 - 1 - i] - '0';
        int digit = (d1 + d2 + carry) % 10;
        carry = (d1 + d2 + carry) / 10;
        sum = char(digit + '0') + sum;
    }

    // Add remaining digits of num1
    for (int i = len2; i < len1; i++) {
        int d = num1[len1 - 1 - i] - '0';
        int digit = (d + carry) % 10;
        carry = (d + carry) / 10;
        sum = char(digit + '0') + sum;
    }

    // Add remaining carry
    if (carry) {
        sum = char(carry + '0') + sum;
    }

    return sum;
}

// Recursively checks if the string from index
// start is a valid sum-sequence
bool checkSequence(string s, int start, int len1, int len2) {

    string part1 = s.substr(start, len1);
    string part2 = s.substr(start + len1, len2);

    // Check for leading zeroes
    if ((part1.length() > 1 && part1[0] == '0') ||
        (part2.length() > 1 && part2[0] == '0')) {
        return false;
    }

    string expectedSum = addStrings(part1, part2);

    int sumLen = expectedSum.length();

    // If sum length exceeds remaining string,
    // return false
    if (start + len1 + len2 + sumLen > s.length()) {
        return false;
    }

    string nextPart = s.substr(start + len1 + len2, sumLen);

    // Check for leading zeroes
    if (nextPart.length() > 1 && nextPart[0] == '0') {
        return false;
    }

    // If the sum matches the next part in string
    if (expectedSum == nextPart) {

        // If end is reached, return true
        if (start + len1 + len2 + sumLen == s.length()) {
            return true;
        }

        // Recur for next pair: part2 and expectedSum
        return checkSequence(s, start + len1, len2, sumLen);
    }

    // Sum does not match the next segment
    return false;
}

// Function to check if a string is a sum-string
bool isSumString(string &s) {
    int n = s.length();

    // Try all combinations of first two parts
    for (int len1 = 1; len1 < n; len1++) {
        for (int len2 = 1; len1 + len2 < n; len2++) {
            if (checkSequence(s, 0, len1, len2)) {
                return true;
            }
        }
    }

    return false;
}

// Driver Code
int main() {
    
    string s = "12243660";
    
    cout << (isSumString(s)?"true":"false");
}