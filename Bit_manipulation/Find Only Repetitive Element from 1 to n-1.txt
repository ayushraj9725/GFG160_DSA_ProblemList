Problem : Find Only Repetitive Element from 1 to n-1

Problem Statement : 
Given an array arr[] of size n, filled with numbers from 1 to n-1 in random order. The array has only one repetitive element. Your task is to find the repetitive element.

Note: It is guaranteed that there is a repeating element present in the array.

Examples:

Input: arr[] = [1, 3, 2, 3, 4]
Output: 3 
Explanation: The number 3 is the only repeating element.

Input: arr[] = [1, 5, 1, 2, 3, 4]
Output: 1  
Explanation: The number 1 is the only repeating element.

Input: arr[] = [1, 1]  
Output: 1
Explanation: The array is of size 2 with both elements being 1, making 1 the repeating element.

Constraints:
2 ≤ arr.size() ≤ 105
1 ≤ arr[i] ≤ n-1 

Expected Complexities
Time Complexity: O(n)
Auxiliary Space: O(1)


/******************************************************************* CPP SOLUTION IMPLEMENTATION **************************************************************/

Table of Content

[Naive Approach] Using Nested Loop- O(n^2) Time and O(1) Space


[Better Approach 1] Sorting – O(n Log n) Time and O(1) Space



[Better Approach 2] Hash Set – O(n) Time and O(n) Space



[Expected Approach 1] Sum Formula – O(n) Time and O(1) Space




[Expected Approach 2] Using XOR – O(n) Time and O(1) Space


class Solution {
  public:
    int findDuplicate(vector<int>& arr) {
        // code here
        
        int n = arr.size();
        int xor1 = 0 , xor2 = 0 ;
        
        for(int i = 0 ; i < n - 1; i++){
            xor1 = xor1 ^ (i + 1) ;
            xor2 = xor2 ^ arr[i];
        }
        xor2 = xor2 ^ arr[n - 1];
        
        return xor1 ^ xor2 ;
        
    }
};



[Expected Approach 3] Using Elements as Indexes – O(n) Time and O(1) Space





[Expected Approach 4] Floyd’s Cycle Detection – O(n) Time and O(1) Space
