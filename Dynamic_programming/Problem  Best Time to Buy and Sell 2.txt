Problem : Best Time to Buy and Sell Stock II 

( leetcode 122 )

Problem Statement : 
You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.

Example 2:
Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Total profit is 4.

Example 3:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.
 

Constraints:

1 <= prices.length <= 3 * 104
0 <= prices[i] <= 104

/************************************************************************ CPP  SOLUTION *******************************************************************************/

///////////   RECURSION SOLUTION : O(2^n) time with  O(N) STACK SPACE USING

class Solution {
public:
    int fun(int ind , int buy , vector<int>& prices ){
        // base case 
        if(ind >= prices.size()) return 0 ;
        int profit = 0 ;
        // recursive case 
        if(buy){ // if(buy == 1)
            profit = max(-prices[ind] + fun(ind+1,0,prices) , 0 + fun(ind+1,1,prices)); // take at perticular ind to make profit by selling in future at time ,or not take simpley move on to next ind for buy 
        }
        else{ // if not buy then we will sell and make profit
            profit = max(prices[ind] + fun(ind+1,1,prices), 0 + fun(ind+1,0,prices)) ; // buy and not buy
        }

        return profit ;
    }
    int maxProfit(vector<int>& prices) {
        // using recursion exploring all the possibility of profit 
        // we can buy or sell at every index , so 2 possibility over there buy or not buy 
       // we will optimize it using memorization : n,2 size because 0/1 buy possibility
       vector<vector<int>> dp(n,vector<int>(2,-1)); // init with -1
       return fun(0,1,prices);

    }
};

//////////   USING DP MEMORIZATION TOP DOWN : : O(n * 2)  TIME AND WITH SPACE  :: O(N*2)   \\\\\\\\\

class Solution {
public:
    int fun(int ind , int buy , vector<int>& prices , vector<vector<int>> &dp){
        // base case 
        if(ind >= prices.size()) return 0 ;
        // CHECK UNNECESSARY CALLS 
        if(dp[ind][buy] != -1) return dp[ind][buy] ;
        int profit = 0 ;
        // recursive case 
        if(buy){ // if(buy == 1)
            profit = max(-prices[ind] + fun(ind+1,0,prices,dp) , 0 + fun(ind+1,1,prices,dp)); // take at perticular ind to make profit by selling in future at time ,or not take simpley move on to next ind for buy 
        }
        else{ // if not buy then we will sell and make profit
            profit = max(prices[ind] + fun(ind+1,1,prices,dp), 0 + fun(ind+1,0,prices,dp)) ; // buy and not buy
        }

        return dp[ind][buy] = profit ;
    }
    int maxProfit(vector<int>& prices) {
        // using recursion exploring all the possibility of profit 
        // we can buy or sell at every index , so 2 possibility over there buy or not buy 
       // we will optimize it using memorization : n,2 size because 0/1 buy possibility
       int n = prices.size();
       vector<vector<int>> dp(n,vector<int>(2,-1)); // init with -1
       return fun(0,1,prices,dp);

    }
};

///////////   USING DP TABULATION  BOTTOM UP : : O(n * 2)  TIME AND WITH SPACE  :: O(N*2)

int maxProfit(vector<int>& prices) {
    int n = prices.size();
    vector<vector<int>> dp(n + 1, vector<int>(2, 0)); // DP table (n+1,2) initialized to 0

    // Traverse in reverse order (bottom-up approach)
    for (int ind = n - 1; ind >= 0; ind--) {
        for (int buy = 0; buy <= 1; buy++) {
            if (buy == 1) {
                dp[ind][buy] = max(-prices[ind] + dp[ind + 1][0], dp[ind + 1][1]);
            } else {
                dp[ind][buy] = max(prices[ind] + dp[ind + 1][1], dp[ind + 1][0]);
            }
        }
    }
    
    return dp[0][1]; // Max profit starting from index 0 with buying option
}


///////////  OPTIMAL SOLUTION USING ONLY    :  :  O(N) TIME WITH CONT SPACE :: O(1) \\\\\\\\\\\\\\\\\\\

int maxProfit(vector<int>& prices) {
    int n = prices.size();
    vector<int> ahead(2, 0), curr(2, 0);

    for (int ind = n - 1; ind >= 0; ind--) {
        curr[1] = max(-prices[ind] + ahead[0], ahead[1]);
        curr[0] = max(prices[ind] + ahead[1], ahead[0]);
        ahead = curr;
    }

    return ahead[1]; // Max profit starting from index 0 with buying option
}


/************************************************************************  JAVA SOLUTION ****************************************************************************/

///////////   USING DP TABULATION  BOTTOM UP : : O(n * 2)  TIME AND WITH SPACE  :: O(N*2)

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n + 1][2]; // DP table initialized to 0

        for (int ind = n - 1; ind >= 0; ind--) {
            for (int buy = 0; buy <= 1; buy++) {
                if (buy == 1) {
                    dp[ind][buy] = Math.max(-prices[ind] + dp[ind + 1][0], dp[ind + 1][1]);
                } else {
                    dp[ind][buy] = Math.max(prices[ind] + dp[ind + 1][1], dp[ind + 1][0]);
                }
            }
        }
        
        return dp[0][1]; // Max profit starting from index 0 with buying option
    }
}


///////////  OPTIMAL SOLUTION USING ONLY    :  :  O(N) TIME WITH CONT SPACE :: O(1) \\\\\\\\\\\\\\\\\\\

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[] ahead = new int[2], curr = new int[2];

        for (int ind = n - 1; ind >= 0; ind--) {
            curr[1] = Math.max(-prices[ind] + ahead[0], ahead[1]);
            curr[0] = Math.max(prices[ind] + ahead[1], ahead[0]);
            ahead = curr.clone();
        }

        return ahead[1]; // Max profit starting from index 0 with buying option
    }
}


/////////////  another solution USING GREEDY APPROACH  \\\\\\\\\\\\\\\\\\\\  O(N) TIME  ONLY SPACE CONT 

class Solution {
    public int maxProfit(int[] prices) {
        int profit = 0 ;

        for(int i = 1 ;i < prices.length ;i++){
            if(prices[i] > prices[i-1]){
                profit = profit + prices[i] - prices[i-1] ;
            }
        }
       return profit ;
       
       // O(N) time and O(1) space 
    }
}
