Problem : Best Time to Buy and Sell Stock 3

( leetcode 123 )

Problem Statement : 
You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.

Example 2:
Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.

Example 3:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 105

/************************************************************************ CPP  SOLUTION *******************************************************************************/

///////////   RECURSION SOLUTION : O(2^n) time with  O(N) STACK SPACE USING

class Solution {
public:
    int solve(int ind , int buy , int cap , vector<int> &prices){
        int n = prices.size() ;
        // base case 
        if(ind == n || cap == 0) return 0 ; // if ind exhosted then we return 0 not buy or not sold anything or capacity is get 0 then we not need to maximize simple return 0 as answer 
        // recursive code
        if(buy){
           return max(-prices[ind] + solve(ind+1,0,cap,prices) , 0 + solve(ind+1,1,cap,prices)); // cap as it is sam because we are in buying stage so transaction is not ye completed 

        }else{ // sell case , we are in selling stage 
           return max(prices[ind]+solve(ind+1,1,cap-1,prices) , 0 + solve(ind+1,0,cap,prices)); 
           // we sold stocks so that ind price and go to the next for buying new stocks here last transaction is completed so we do capacity -1 , or if we not sold yet then we will go for selling to next
           // whichever is max then we picked up and return that in sell stage  
        }
    }
    int maxProfit(vector<int>& prices) {
        // RECURSIVE CODE : 1st Solution that is very naive solution 

        return solve(0,1,2,prices) ; // we pass 0 as ind starting , 1 is as considering buy , 2 is at most given transaction according to the problem statement 

    }
};


//////////   USING DP MEMORIZATION TOP DOWN : : O(n * 2)  TIME AND WITH SPACE  :: O(N*2)   \\\\\\\\\

class Solution {
public:
    int solve(int ind , int buy , int cap , vector<int> &prices , vector<vector<vector<int>>> &dp){
        int n = prices.size() ;
        // base case 
        if(ind == n || cap == 0) return 0 ; // if ind exhosted then we return 0 not buy or not sold anything or capacity is get 0 then we not need to maximize simple return 0 as answer 
        // recursive code
        
        // CHECK UNNECESSARY CALLS
        if(dp[ind][buy][cap] != -1) return dp[ind][buy][cap] ;
        if(buy){
           return dp[ind][buy][cap] = max(-prices[ind] + solve(ind+1,0,cap,prices,dp) , 0 + solve(ind+1,1,cap,prices,dp)); // cap as it is sam because we are in buying stage so transaction is not ye completed 

        }else{ // sell case , we are in selling stage 
           return dp[ind][buy][cap] = max(prices[ind]+solve(ind+1,1,cap-1,prices,dp) , 0 + solve(ind+1,0,cap,prices,dp)); 
           // we sold stocks so that ind price and go to the next for buying new stocks here last transaction is completed so we do capacity -1 , or if we not sold yet then we will go for selling to next
           // whichever is max then we picked up and return that in sell stage  
        }
    }
    int maxProfit(vector<int>& prices) {
        // RECURSIVE CODE : 1st Solution that is very naive solution 
        // DYNAMIC PROGRAMMING MEMORIZATION TOP UP : BETTER APPROACH 
        int n = prices.size() ;
        vector<vector<vector<int>>> dp(n,vector<vector<int>>(2,vector<int>(3,-1)));
        return solve(0,1,2,prices,dp) ; // we pass 0 as ind starting , 1 is as considering buy , 2 is at most given transaction according to the problem statement 

    }
};


///////////   USING DP TABULATION  BOTTOM UP : : O(n * 2)  TIME AND WITH SPACE  :: O(N*2)

class Solution {
public:
     
    int maxProfit(vector<int>& prices) {
      int n = prices.size() ;
      vector<vector<vector<int>>> dp(n+1,vector<vector<int>>(2,vector<int>(3,0)));
      // WTIRE THE TABULATION METHOD TO OPTIMIZED THE CODE IN STACK USING

      for(int ind = n-1 ; ind >= 0 ; ind--){ // we can start iteratiing from n-1 here 
        for(int buy = 0 ; buy <= 1 ; buy++){
          for(int cap = 1 ; cap <= 2 ; cap++){  // cap we can start from 1 skipping 0 to make base case
              if(buy){
                 dp[ind][buy][cap] = max(-prices[ind] + dp[ind+1][0][cap] , 0 + dp[ind+1][1][cap]);
              }else{
                 dp[ind][buy][cap] = max(prices[ind] + dp[ind+1][1][cap-1] , 0 + dp[ind+1][0][cap]);
              }
          }
        }
      }

       return dp[0][1][2]; // initially at bottom we have the answer 

}

///////////  OPTIMAL SOLUTION USING ONLY    :  :  O(N) TIME WITH CONT SPACE : : O(1)  \\\\\\\\\\\\\\\\\\\

int maxProfit(vector<int>& prices) {
    int n = prices.size();
    vector<vector<int>> ahead(2, vector<int>(3, 0)), curr(2, vector<int>(3, 0));

    for (int ind = n - 1; ind >= 0; ind--) {
        for (int buy = 0; buy <= 1; buy++) {
            for (int cap = 1; cap <= 2; cap++) {
                if (buy) {
                    curr[buy][cap] = max(-prices[ind] + ahead[0][cap], ahead[1][cap]);
                } else {
                    curr[buy][cap] = max(prices[ind] + ahead[1][cap - 1], ahead[0][cap]);
                }
            }
        }
        ahead = curr;
    }

    return ahead[1][2];
}


/************************************************************************  JAVA SOLUTION ****************************************************************************/

///////////   USING DP TABULATION  BOTTOM UP : : O(n * 2)  TIME AND WITH SPACE  : : O(N*2)  \\\\\\\\\\

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][][] dp = new int[n + 1][2][3];

        // Base Case: Profit is 0 if no transactions are allowed
        for (int ind = 0; ind <= n; ind++) {
            for (int buy = 0; buy <= 1; buy++) {
                dp[ind][buy][0] = 0;
            }
        }

        // Fill DP Table Bottom-Up
        for (int ind = n - 1; ind >= 0; ind--) {
            for (int buy = 0; buy <= 1; buy++) {
                for (int cap = 1; cap <= 2; cap++) {
                    if (buy == 1) {
                        dp[ind][buy][cap] = Math.max(-prices[ind] + dp[ind + 1][0][cap], dp[ind + 1][1][cap]);
                    } else {
                        dp[ind][buy][cap] = Math.max(prices[ind] + dp[ind + 1][1][cap - 1], dp[ind + 1][0][cap]);
                    }
                }
            }
        }

        return dp[0][1][2];
    }
}

///////////  OPTIMAL SOLUTION USING ONLY    :  :  O(N) TIME WITH CONT SPACE :: O(1) \\\\\\\\\\\\\\\\\\\

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] ahead = new int[2][3], curr = new int[2][3];

        for (int ind = n - 1; ind >= 0; ind--) {
            for (int buy = 0; buy <= 1; buy++) {
                for (int cap = 1; cap <= 2; cap++) {
                    if (buy == 1) {
                        curr[buy][cap] = Math.max(-prices[ind] + ahead[0][cap], ahead[1][cap]);
                    } else {
                        curr[buy][cap] = Math.max(prices[ind] + ahead[1][cap - 1], ahead[0][cap]);
                    }
                }
            }
            ahead = curr.clone();
        }

        return ahead[1][2];
    }
}


