Problem : Best Time to Buy and Sell Stock IV

Problem Statement : 
You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.

Example 2:
Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
 

Constraints:

1 <= k <= 100
1 <= prices.length <= 1000
0 <= prices[i] <= 1000


/ ********************************************************************* CPP SOLUTION ********************************************************************************/

//////   RECURSION SOLUTION : O(2^n) TIME AND SPACE : : O(N) USING STACK Space 


/////// USING DP MEMORIZATION  ::   TOP DOWN 

✅ Time Complexity: O(N * 2 * K) = O(N * K)
✅ Space Complexity: O(N * 2 * K) = O(N * K)

class Solution {
public:
    vector<vector<vector<int>>> dp;

    int solve(int ind, int buy, int cap, vector<int>& prices) {
        // Base Case: If we have traversed all prices or used all transactions
        if (ind == prices.size() || cap == 0) return 0;

        // Check if already computed
        if (dp[ind][buy][cap] != -1) return dp[ind][buy][cap];

        int profit = 0;
        if (buy) {
            // Either buy the stock or skip
            profit = max(-prices[ind] + solve(ind + 1, 0, cap, prices),
                         solve(ind + 1, 1, cap, prices));
        } else {
            // Either sell the stock or skip
            profit = max(prices[ind] + solve(ind + 1, 1, cap - 1, prices),
                         solve(ind + 1, 0, cap, prices));
        }

        return dp[ind][buy][cap] = profit;
    }

    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        dp = vector<vector<vector<int>>>(n, vector<vector<int>>(2, vector<int>(k + 1, -1)));
        return solve(0, 1, k, prices); // Start from index 0, allowed to buy, and k transactions left
    }
};



//////////   USING DP TABULATION : : BOTTOM UP 

int maxProfit(int k, vector<int>& prices) {
    int n = prices.size();
    vector<vector<vector<int>>> dp(n + 1, vector<vector<int>>(2, vector<int>(k + 1, 0)));

    // Fill DP Table Bottom-Up
    for (int ind = n - 1; ind >= 0; ind--) {
        for (int buy = 0; buy <= 1; buy++) {
            for (int cap = 1; cap <= k; cap++) { // Cap should go from 1 to k
                if (buy) {
                    dp[ind][buy][cap] = max(-prices[ind] + dp[ind + 1][0][cap], dp[ind + 1][1][cap]);
                } else {
                    dp[ind][buy][cap] = max(prices[ind] + dp[ind + 1][1][cap - 1], dp[ind + 1][0][cap]);
                }
            }
        }
    }

    return dp[0][1][k]; // Max profit starting at index 0, buy allowed, k transactions
}


//////////  OPTIMIZED SOLUTION USING  SPACE OPTIMIZATION ::: Time Complexity: O(N * 2 * K) = O(N * K) ,  SPACE : O(N * 2 * K) = O(N * K)  \\\\\\\\\\

int maxProfit(int k, vector<int>& prices) {
    int n = prices.size();
    vector<vector<int>> ahead(2, vector<int>(k + 1, 0)), curr(2, vector<int>(k + 1, 0));

    for (int ind = n - 1; ind >= 0; ind--) {
        for (int buy = 0; buy <= 1; buy++) {
            for (int cap = 1; cap <= k; cap++) {
                if (buy) {
                    curr[buy][cap] = max(-prices[ind] + ahead[0][cap], ahead[1][cap]);
                } else {
                    curr[buy][cap] = max(prices[ind] + ahead[1][cap - 1], ahead[0][cap]);
                }
            }
        }
        ahead = curr;
    }

    return ahead[1][k]; // Max profit starting at index 0, buy allowed, k transactions
}


///////////////////////////  ANOTHER SOLUTION USING CPP HERE ::::::::::::::;;;;  other Way :: WATCH THE STRIVER VIDEO  




/************************************************************* JAVA SOLUTION ****************************************************************************************/


/////////////// RECURSION :: 


////////////// DP MEMORIZATION TOP UP :: 

class Solution {
    int[][][] dp;

    public int solve(int ind, int buy, int cap, int[] prices) {
        // Base Case: If we have traversed all prices or used all transactions
        if (ind == prices.length || cap == 0) return 0;

        // Check if already computed
        if (dp[ind][buy][cap] != -1) return dp[ind][buy][cap];

        int profit = 0;
        if (buy == 1) {
            // Either buy the stock or skip
            profit = Math.max(-prices[ind] + solve(ind + 1, 0, cap, prices),
                              solve(ind + 1, 1, cap, prices));
        } else {
            // Either sell the stock or skip
            profit = Math.max(prices[ind] + solve(ind + 1, 1, cap - 1, prices),
                              solve(ind + 1, 0, cap, prices));
        }

        return dp[ind][buy][cap] = profit;
    }

    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        dp = new int[n][2][k + 1];
        for (int[][] row : dp) for (int[] col : row) Arrays.fill(col, -1);
        return solve(0, 1, k, prices); // Start from index 0, allowed to buy, and k transactions left
    }
}


///////////// DP TAULATION BOTTOM UP :: 

class Solution {
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        int[][][] dp = new int[n + 1][2][k + 1];

        for (int ind = n - 1; ind >= 0; ind--) {
            for (int buy = 0; buy <= 1; buy++) {
                for (int cap = 1; cap <= k; cap++) {
                    if (buy == 1) {
                        dp[ind][buy][cap] = Math.max(-prices[ind] + dp[ind + 1][0][cap], dp[ind + 1][1][cap]);
                    } else {
                        dp[ind][buy][cap] = Math.max(prices[ind] + dp[ind + 1][1][cap - 1], dp[ind + 1][0][cap]);
                    }
                }
            }
        }

        return dp[0][1][k];
    }
}

///////////// OPTIMIZED SPACE USING  DP IN  O(K) SPACE AND O(N*K) TIME 

class Solution {
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        int[][] ahead = new int[2][k + 1], curr = new int[2][k + 1];

        for (int ind = n - 1; ind >= 0; ind--) {
            for (int buy = 0; buy <= 1; buy++) {
                for (int cap = 1; cap <= k; cap++) {
                    if (buy == 1) {
                        curr[buy][cap] = Math.max(-prices[ind] + ahead[0][cap], ahead[1][cap]);
                    } else {
                        curr[buy][cap] = Math.max(prices[ind] + ahead[1][cap - 1], ahead[0][cap]);
                    }
                }
            }
            ahead = curr.clone();
        }

        return ahead[1][k];
    }
}


/************************************************************************************************************************************************************************/



 
