Problem : Minimum Jumps

Problem Other name : Jump game 2 ( Leetcode 45 )

Problem Statement : 
You are given an array arr[] of non-negative numbers. Each number tells you the maximum number of steps you can jump forward from that position.

For example:

If arr[i] = 3, you can jump to index i + 1, i + 2, or i + 3 from position i.
If arr[i] = 0, you cannot jump forward from that position.
Your task is to find the minimum number of jumps needed to move from the first position in the array to the last position.

Note:  Return -1 if you can't reach the end of the array.

Examples : 

Input: arr[] = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9]
Output: 3 
Explanation: First jump from 1st element to 2nd element with value 3. From here we jump to 5th element with value 9, and from here we will jump to the last. 

Input: arr = [1, 4, 3, 2, 6, 7]
Output: 2 
Explanation: First we jump from the 1st to 2nd element and then jump to the last element.

Input: arr = [0, 10, 20]
Output: -1
Explanation: We cannot go anywhere from the 1st element.

Constraints:
2 ≤ arr.size() ≤ 104
0 ≤ arr[i] ≤ 104

Company Tags
Moonfrog Labs  Flipkart  Amazon  Microsoft   Housing.com   Walmart  Adobe  Google

/********************************************************************* CPP SOLUTION *****************************************************************************/

// EXTREME BRUTE FORCE USING ALL POSSIBLE SCENARIO    TIME TAKING  : O(N^N) because we are exploring n for every SPACE : O(N) STACK

class Solution {
  public:
    int solve(vector<int>& arr , int jump , int i){
        // base case :
        if(i >= arr.size() - 1) return jump ;
        
        // recursive case
        int mini = INT_MAX;
        for(int j = 1 ; j <= arr[i] ;j++){
            int curr = solve(arr,jump+1,i+j);
            mini = min(mini,curr);
        }
        return (mini == INT_MAX) ? -1  : mini ;
    }
    int minJumps(vector<int>& arr) {
        
        // code here
        return solve(arr,0,0);  //  jump in starting 0 
        
    }
};


// BETTER APPROACH 1 USING DP MEMORIZATION  TOP DOWN  :  TIME TAKING : O(N^2)   WITH SPACE O(N^N)  

class Solution {
  public:
    int memo[1001][1001];
    int solve(vector<int>& arr ,int jump , int i){
        // base case :
        if(i >= arr.size() - 1) return jump ;
        
        // check the unecessary recursive calls
        if(memo[i][jump] != -1) return memo[i][jump] ;
        
        // recursive case
        int mini = INT_MAX;
        for(int j = 1 ; j <= arr[i] ;j++){
            int curr = solve(arr,jump+1,i+j);
            mini = min(mini,curr);
        }
        
        return memo[i][jump] = (mini == INT_MAX) ? -1  : mini ;
        
    }
    int minJumps(vector<int>& arr) {
        
        memset(memo,-1,sizeof(memo));
        // code here
        return solve(arr,0,0);  //  jump in starting 0 
        
    }
};

BUT ABOVE CODE SOME COUPLE OF  ISSUE  

class Solution {
  public:
    int memo[1001][1001];
    int solve(vector<int>& arr ,int jump , int i){
        // base case :
        if(i >= arr.size() - 1) return jump ;
        
        // check the unecessary recursive calls
        if(memo[i][jump] != -1) return memo[i][jump] ;
        
        // if stuck at zero can not move forward
        if(arr[i] == 0) return memo[i][jump] = INT_MAX ;
        
        // recursive case
        int mini = INT_MAX;
        for(int j = 1 ; j <= arr[i] ;j++){
            int curr = solve(arr,jump+1,i+j);
            if(curr != INT_MAX){
                mini = min(mini,curr);
            }
        }
        
        return memo[i][jump]  =  mini ;
        
    }
    int minJumps(vector<int>& arr) {
        
        memset(memo,-1,sizeof(memo));
        // code here
        int res = solve(arr,0,0);  //  jump in starting 0 
        
        return (res == INT_MAX) ? -1 : res ;
    }
};
/// HERE WE CAN OPTIMIZED THE SPACE IN ONLY SINGLE ARRAY : O(N) SPACE 



// BETTER APPROACH 2 USING DP MEMORIZATION BOTTOM UP : TIME TAKING : O(N^2) WITH SPACE OPTIMIZED  IN O(N) only 

#include <bits/stdc++.h>
using namespace std;

int minJumps(vector<int>& arr) {
    int n = arr.size();
    vector<int> dp(n, INT_MAX); // Initialize DP table
    dp[0] = 0; // Start at index 0 with 0 jumps

    for (int i = 0; i < n; i++) {
        if (dp[i] == INT_MAX || arr[i] == 0) continue; // Cannot move from this index

        for (int j = 1; j <= arr[i] && i + j < n; j++) {
            dp[i + j] = min(dp[i + j], dp[i] + 1);
        }
    }
    
    return (dp[n - 1] == INT_MAX) ? -1 : dp[n - 1];
}

int main() {
    vector<int> arr = {9, 10, 1, 2, 3, 4, 8, 0, 0, 0, 0, 0, 0, 0, 1};
    cout << minJumps(arr) << endl; // Output: 2
    return 0;
}


///  EXTREME OPTIMAL SOLUTION IS USING   " GREEDY " WITH TIME   : O(N) AND SPACE O(1)  constant 

 #include <bits/stdc++.h>
using namespace std;

int minJumps(vector<int>& arr) {
    int n = arr.size();
    if (n == 1) return 0;
    if (arr[0] == 0) return -1;

    int jumps = 0, farthest = 0, currentEnd = 0;

    for (int i = 0; i < n - 1; i++) {
        farthest = max(farthest, i + arr[i]);

        if (i == currentEnd) {
            jumps++;
            currentEnd = farthest;
            if (currentEnd >= n - 1) return jumps;
        }
    }
    return -1;
}

int main() {
    vector<int> arr = {9, 10, 1, 2, 3, 4, 8, 0, 0, 0, 0, 0, 0, 0, 1};
    cout << minJumps(arr) << endl; // Output: 2
    return 0;
}



/********************************************************************** java solution ********************************************************************************/

///// EXTREME BRUTE FORCE :: 


///// TOP DOWN MEMORIZATION :::


/// BOTTOM UP MEMORIZATION ::

   import java.util.*;

class Solution {
    public int minJumps(int[] arr) {
        int n = arr.length;
        int[] dp = new int[n];
        Arrays.fill(dp, Integer.MAX_VALUE); // Initialize DP array
        dp[0] = 0; // Start at index 0 with 0 jumps

        for (int i = 0; i < n; i++) {
            if (dp[i] == Integer.MAX_VALUE || arr[i] == 0) continue; // Can't move from here

            for (int j = 1; j <= arr[i] && i + j < n; j++) {
                dp[i + j] = Math.min(dp[i + j], dp[i] + 1);
            }
        }
        
        return (dp[n - 1] == Integer.MAX_VALUE) ? -1 : dp[n - 1];
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[] arr = {9, 10, 1, 2, 3, 4, 8, 0, 0, 0, 0, 0, 0, 0, 1};
        System.out.println(sol.minJumps(arr)); // Output: 2
    }
}


////////////////////////////////////////////  OPTIMIZED SOLUTION USING GREEDY \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


class Solution {
    public int minJumps(int[] arr) {
        int n = arr.length;
        if (n == 1) return 0;
        if (arr[0] == 0) return -1;

        int jumps = 0, farthest = 0, currentEnd = 0;

        for (int i = 0; i < n - 1; i++) {
            farthest = Math.max(farthest, i + arr[i]);

            if (i == currentEnd) {
                jumps++;
                currentEnd = farthest;
                if (currentEnd >= n - 1) return jumps;
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[] arr = {9, 10, 1, 2, 3, 4, 8, 0, 0, 0, 0, 0, 0, 0, 1};
        System.out.println(sol.minJumps(arr)); // Output: 2
    }
}


/**********************************************************************************************************************************************/