Problem  :  Stickler Thief

Problem statement : 
Stickler the thief wants to loot money from the houses arranged in a line. He cannot loot two consecutive houses and aims to maximize his total loot.
Given an array, arr[] where arr[i] represents the amount of money in the i-th house.
Determine the maximum amount he can loot.

Examples:

Input: arr[] = [6, 5, 5, 7, 4]
Output: 15
Explanation: Maximum amount he can get by looting 1st, 3rd and 5th house. Which is 6 + 5 + 4 = 15.

Input: arr[] = [1, 5, 3]
Output: 5
Explanation: Loot only 2nd house and get maximum amount of 5.

Input: arr[] = [4, 4, 4, 4]
Output: 8
Explanation: The optimal choice is to loot every alternate house. Looting the 1st and 3rd houses, or the 2nd and 4th, both give a maximum total of 4 + 4 = 8.

Constraints:
1 ≤ arr.size() ≤ 105
1 ≤ arr[i] ≤ 104

Company Tags
Paytm   Flipkart   Amazon   OYO Rooms   Walmart   Google

/******************************************************************** SOLUTION CPP ALL APPROACH **************************************************************/

// // RECURSIVE CODE : USING RECURSION IN TIME :  O(2^n) time and O(N) space in stack

class Solution {
  public:
    int solve(vector<int>& arr ,int i){
        // base case
        if(i >= arr.size()) return 0 ;
        
        // RECURSIVE CASE
        int pick = arr[i] + solve(arr,i+2); // go for the next skipping consecutive 
        int nopick = solve(arr,i+1);
        
        return max(pick,nopick);
        
    }
    int findMaxSum(vector<int>& arr) {
        // code here
        // RECURSIVE CODE : USING RECURSION IN TIME : O(2^n) time and O(N) space in stack
        // OPTIMIZED APPROACH < BETTER : USING DP MEMORIZATION and TABULATION in O(N) time and  O(N) space
        // more optimizaed dp space in : O(N) time and space O(1)
        
        return solve(arr,0);
    }
};


// // OPTIMIZED APPROACH < BETTER  :  USING DP MEMORIZATION and TABULATION in O(N) time and  O(N) space

class Solution {
  public:
    int dp[1001];
    int solve(vector<int>& arr ,int i){
        // base case
        if(i >= arr.size()) return 0 ;
        
        // check the dp array for unnecessary recursive call
        if(dp[i] != -1) return dp[i] ;
        
        // RECURSIVE CASE
        int pick = arr[i] + solve(arr,i+2); // go for the next skipping consecutive 
        int nopick = solve(arr,i+1);
        
        return dp[i] =  max(pick,nopick);
        
    }
    int findMaxSum(vector<int>& arr) {
        // code here
        // RECURSIVE CODE : USING RECURSION IN TIME : O(2^n) time and O(N) space in stack
        // OPTIMIZED APPROACH < BETTER : USING DP MEMORIZATION and TABULATION in O(N) time and  O(N) space
        // more optimizaed dp space in : O(N) time and space O(1)
        
        memset(dp,-1,sizeof(dp));
        return solve(arr,0);
    }
};\
 
  //   TABULATION   METHOD 
  
   class Solution {
  public:
      int solve(vector<int>& arr ){
          int n = arr.size() ;
          vector<int> dp(n,0); 
          // base case
          dp[0] = arr[0];
          dp[1] = max(arr[0],arr[1]);
          
          // loop run and fill the dp array 
          for(int i = 2 ; i <= n ; i++){
              dp[i] = max(dp[i-1],dp[i-2] + arr[i]) ; // currnt and prrevious or stat previous one of both 
          }
           
          return dp[n-1];
      }
      int findMaxSum(vector<int>& arr) {
       
        return solve(arr);
  
      }
    };

 // more optimizaed dp space in : O(N) time and space O(1)

class Solution {
  public:
      int solve(vector<int>& arr ){
          int n = arr.size() ;
          // base case
          if(n==1) return arr[0];
          if(n==2) return max(arr[0],arr[1]);
          // solve it using variable nopt space 
          int prev = arr[0];
          int startprev = 0 ;
          int ans = 0 ;
          // loop run and fill the dp array 
          for(int i = 1 ; i < n ; i++){
              ans = max(prev,startprev + arr[i]) ; // currnt and prrevious or stat previous one of both 
          
              // let's update the prev and start prev
              startprev = prev ;
              prev = ans ;
              
          }
           
          return ans;
          
      }
      int findMaxSum(vector<int>& arr) {
       
        return solve(arr);
  
      }
      

/********************************************************************** JAVA CODE SOLUTION *******************************************************************/
