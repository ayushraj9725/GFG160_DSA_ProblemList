Problem : Find the number of islands

Problem Statement : 
Given a grid of size n*m (n is the number of rows and m is the number of columns in the grid) consisting of 'W's (Water) and 'L's (Land). Find the number of islands.

Note: An island is either surrounded by water or the boundary of a grid and is formed by connecting adjacent lands horizontally or vertically or diagonally i.e., in all 8 directions.

Examples:

Input: grid[][] = [['L', 'L', 'W', 'W', 'W'], ['W', 'L', 'W', 'W', 'L'], ['L', 'W', 'W', 'L', 'L'], ['W', 'W', 'W', 'W', 'W'], ['L', 'W', 'L', 'L', 'W']]
Output: 4
Explanation:
The image below shows all the 4 islands in the grid.
 
Input: grid[][] = [['W', 'L', 'L', 'L', 'W', 'W', 'W'], ['W', 'W', 'L', 'L', 'W', 'L', 'W']]
Output: 2
Expanation:
The image below shows 2 islands in the grid.
 
Constraints:
1 ≤ n, m ≤ 500
grid[i][j] = {'L', 'W'}

Company Tags 
Paytm  Flipkart  Amazon  Microsoft  OYO Rooms  Samsung  Snapdeal  CitrixD-E-Shaw  MakeMyTrip  Ola Cabs  VisaIntuit  Google  Linkedin  OperaOne97 Streamoid  Technologies  Informatica  Walmart

Expected Complexities
Time Complexity  : O(n * m)  Auxiliary Space  : O(n * m)


/////////////////////////////////////////////////////////////////////////////// APPROACH AND SOLUTION USING CPP ////////////////////////////////////////////////////////////////////////////////

[Approach 1] Using DFS and Additional Matrix – O(n*m) Time and O(n*m) Space


[Approach 2] Using Space Optimized DFS – O(n*m) Time and O(1) Space

class Solution {
  public:
    void dfs(vector<vector<char>> &grid , int r , int c){
        int row = grid.size();
        int col = grid[0].size();
        
        if(r < 0 || c < 0 || r >= row || c >= col || grid[r][c] != 'L'){
            return ;
        }
        
        grid[r][c] = 'W' ;
        
        vector<int> rNbr = {1,-1,0,0,1,-1,1,-1} ;
        vector<int> cNbr = {0,0,1,-1,1,-1,-1,1} ;
        
        for(int i = 0 ; i< 8 ; ++i){
            int newR = r + rNbr[i] ;
            int newC = c + cNbr[i] ;
            
            dfs(grid,newR,newC);
        }
    }
    
    int countIslands(vector<vector<char>>& grid) {
        // Code here
        int row = grid.size();
        int col = grid[0].size();
        int count = 0 ;
        
        for(int r = 0 ; r < row ; r++){
            for(int c = 0 ; c < col ; c++){
                if(grid[r][c] == 'L'){
                    count++ ;
                    
                    dfs(grid,r,c);
                }
            }
        }
        return count ;
    }
};


[Approach 3] Using Breadth First Search – O(n*m) time and O(n*m) space


[Approach 4] Using Disjoint Set – O(n*m) time and O(n*m) space