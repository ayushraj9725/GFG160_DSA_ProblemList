Problem : Minimum Weight Cycle


Problem Statement : 
Given an undirected, weighted graph with V vertices numbered from 0 to V-1 and E edges, represented by a 2d array edges[][], where edges[i] = [u, v, w] represents the edge between the nodes u and v having w edge weight.
Your task is to find the minimum weight cycle in this graph.

Examples:

Input: V = 5, edges[][] = [[0, 1, 2], [1, 2, 2], [1, 3, 1], [1, 4, 1], [0, 4, 3], [2, 3, 4]]
Output: 6
Explanation: 
Minimum-weighted cycle is  0 → 1 → 4 → 0 with a total weight of 6(2 + 1 + 3)

Input: V = 5, edges[][] = [[0, 1, 3], [1, 2, 2], [0, 4, 1], [1, 4, 2], [1, 3, 1], [3, 4, 2], [2, 3, 3]]
Output: 5
Explanation: 
Minimum-weighted cycle is  1 → 3 → 4 → 1 with a total weight of 5(1 + 2 + 2)


Constraints:
1 ≤ V ≤ 100
1 ≤ E = edges.size() ≤ 103 
1 ≤ edges[i][j] ≤ 100

Expected Complexities
Time Complexity: O(E * (V + E) log V)
Auxiliary Space: O(V + E)


/********************************************************************* SOLUTION CPP *****************************************************************************/


Table of Content

[Naive Approach] Find all cycle weight


[Expected Approach] : Using Dijkstra’s algorithm – O(E * (V + E) log V) Time and O(V+E) Space

class Solution {
  public:
    vector<vector<vector<int>>> constructadj(int V , vector<vector<int>>& edges){
        vector<vector<vector<int>>> adj(V) ;
        
        for(auto& edge : edges){
            int u = edge[0] , v = edge[1] , w = edge[2];
            adj[u].push_back({v,w});
            adj[v].push_back({u,w});
        }
        
        return adj ;
    }
    int shortestPath(int V , vector<vector<vector<int>>> & adj , int src , int dest){
        vector<int> dist(V,INT_MAX);
        dist[src] = 0 ;
        
        priority_queue<pair<int,int> , vector<pair<int,int>> , greater<>> pq ;
        pq.push({0,src});
        
        while(!pq.empty()){
            pair<int,int> top = pq.top();
            pq.pop();
            int d = top.first , u = top.second ;
            
            if(d > dist[u]) continue ;
            
            for(auto& neighbor : adj[u]){
                int v = neighbor[0];
                int w = neighbor[1];
                
                if((u == src && v == dest) || (u == dest && v == src)) continue ;
                
                if(dist[v] > dist[u] + w){
                    dist[v] = dist[u] + w ;
                    pq.push({dist[v],v});
                }
            }
        }
        
        return dist[dest];
    }
    int findMinCycle(int V, vector<vector<int>>& edges) {
        // code here
        vector<vector<vector<int>>> adj = constructadj(V,edges);
        int minCycle = INT_MAX ;
        
        for(const auto& edge : edges){
            int u = edge[0];
            int v = edge[1];
            int w = edge[2];
            
            int dist = shortestPath(V,adj,u,v);
            
            if(dist != INT_MAX){
                minCycle = min(minCycle,dist+w);
            }
        }
        
        return minCycle ;
    }
};