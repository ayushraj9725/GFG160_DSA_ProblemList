Problem : Topological sort

Problem Statement : 
Given a Directed Acyclic Graph (DAG) of V (0 to V-1) vertices and E edges represented as a 2D list of edges[][], where each entry edges[i] = [u, v] denotes an directed edge u -> v. Return topological sort for the given graph.

Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge u -> v, vertex u comes before v in the ordering.
Note: As there are multiple Topological orders possible, you may return any of them. If your returned Topological sort is correct then the output will be true else false.

Examples:

Input: V = 4, E = 3, edges[][] = [[3, 0], [1, 0], [2, 0]]
Output: true
Explanation: The output true denotes that the order is valid. Few valid Topological orders for the given graph are:
[3, 2, 1, 0]
[1, 2, 3, 0]
[2, 3, 1, 0]


Input: V = 6, E = 6, edges[][] = [[1, 3], [2, 3], [4, 1], [4, 0], [5, 0], [5,2]]
Output: true
Explanation: The output true denotes that the order is valid. Few valid Topological orders for the graph are:
[4, 5, 0, 1, 2, 3]
[5, 2, 4, 0, 1, 3]


Constraints:
2  ≤  V  ≤  103
1  ≤  E = edges.size()  ≤  (V * (V - 1)) / 2

Company Tags
Moonfrog Labs   Flipkart   Morgan Stanley   Accolite   Amazon   Microsoft   OYO Rooms   Samsung   D-E-Shaw  Visa
 
Expected Complexities
Time Complexity  : O(V + E)    Auxiliary Space  : O(V)




Problem Solution :  using Khan's Algorithms 

class Solution {
  public:
    vector<vector<int>> constructadj(int V , vector<vector<int>> &edges){
        vector<vector<int>> adj(V);
        
        for(auto i : edges){
            adj[i[0]].push_back(i[1]);
        }
        
        return adj ;
    }
    vector<int> topoSort(int V, vector<vector<int>>& edges) {
        // code here
        vector<vector<int>> adj = constructadj(V,edges);
        
        vector<int> indegree(V);
        
        for(int i = 0 ; i < V ;i++){
            for(auto it : adj[i]){
                indegree[it]++ ;
            }
        }
        
        queue<int> q;
        for(int i = 0 ; i < V ;i++){
            if(indegree[i] == 0){
                q.push(i);
            }
        }
        
        vector<int> result ;
        while(!q.empty()){
            int node = q.front();
            q.pop();
            
            result.push_back(node);
            
            for(auto it : adj[node]){
                indegree[it]--;
                
                if(indegree[it] == 0){
                    q.push(it);
                }
            }
        }
        
        // check for cycle 
        return result ;
        
    }
};
