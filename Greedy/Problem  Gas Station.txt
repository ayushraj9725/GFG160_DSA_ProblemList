Problem : Gas Station

Problem Statement : 
There are some gas stations along a circular route. You are given two integer arrays gas[] denoted as the amount of gas present at each station and cost[] denoted as the cost of travelling to the next station. You have a car with an unlimited gas tank. You begin the journey with an empty tank from one of the gas stations. Return the index of the starting gas station if it's possible to travel around the circuit without running out of gas at any station in a clockwise direction. If there is no such starting station exists, return -1.
Note: If a solution exists, it is guaranteed to be unique.

Examples:

Input: gas[] = [4, 5, 7, 4], cost[]= [6, 6, 3, 5]
Output: 2
Explanation: It is possible to travel around the circuit from station at index 2. Amount of gas at station 2 is (0 + 7) = 7.
Travel to station 3. Available gas = (7 – 3 + 4) = 8.
Travel to station 0. Available gas = (8 – 5 + 4) = 7.
Travel to station 1. Available gas = (7 – 6 + 5) = 6.
Return to station 2. Available gas = (6 – 6) = 0.


Input: gas[] = [1, 2, 3, 4, 5], cost[] = [3, 4, 5, 1, 2]
Output: 3
Explanation: It is possible to travel around the circuit from station at index 3. Amount of gas at station 3 is (0 + 4) = 4.
Travel to station 4. Available gas = 4 – 1 + 5 = 8.
Travel to station 0. Available gas = 8 – 2 + 1 = 7.
Travel to station 1. Available gas= 7 – 3 + 2 = 6.
Travel to station 2. Available gas = 6 – 4 + 3 = 5.
Travel to station 3. The cost is 5. The gas is just enough to travel back to station 3.


Input: gas[] = [3, 9], cost[] = [7, 6]
Output: -1
Explanation: There is no gas station to start with such that you can complete the circuit.


Constraints:
1 ≤ gas.size(), cost.size() ≤ 106
1 ≤ gas[i], cost[i] ≤ 103

Company Tags
Zoho  Flipkart  Morgan Stanley  Amazon  Microsoft  FactSet  Google




/*********************************************************************************** CPP SOLUTION *******************************************************************/

[Naive Approach] Considering Every Index as Starting Point – O(n^2) Time and O(1) Space

#include <iostream>
#include <vector>
using namespace std;

int startStation(vector<int> &gas, vector<int> &cost) {
    int n = gas.size();
    int startIdx = -1;
    for(int i = 0; i < n; i++) {
        
        // Initially car tank is empty
        int currGas = 0;
        bool flag = true;
        for (int j = 0; j < n; j++){
            
            // Circular Index
            int idx = (i + j) % n;
            currGas = currGas + gas[idx] - cost[idx];
            
            // If currGas is less than zero, then it isn't
            // possible to proceed further with this starting point
            if(currGas < 0) {
                flag = false;
                break;  
            }
        }
        
      	// If flag is true, then we have found
      	// the valid starting point
        if(flag) {
            startIdx = i;
            break;
        }
    }
    return startIdx;
}

int main() {
    vector<int> gas = {1, 2, 3, 4, 5};
    vector<int> cost = {3, 4, 5, 1, 2};
    cout << startStation(gas, cost) << endl;
    return 0;
}


// OPTIMAL SOLUTION :  USING GREEDY : :   Time Complexity  : O(n)   Auxiliary Space  : O(1)
[Expected Approach 1] Greedy Approach – O(n) Time and O(1) Space

class Solution {
  public:
    int startStation(vector<int> &gas, vector<int> &cost) {
        // Your code here
        int n = gas.size() ;
        int totalGas = 0 ;
        int reqGas = 0 ;
        for(int i = 0 ;i < n ; i++){
            totalGas += gas[i];
            reqGas += cost[i];
        }
        // if there is no solution find then we return -1 because of totalgas is less than req
        if(totalGas < reqGas) return -1 ;
        
        int ans = 0;
        int currGas = 0 ;
        
        for(int i = 0 ; i < n ;i++){
            currGas += gas[i] - cost[i] ;
            if(currGas < 0){
                ans = i + 1 ;
                currGas = 0 ; // if get negative then we do index next when we go
            }
        }
        
        return ans ;
    }
};

/********************************************************************************** JAVA SOLUTION ******************************************************************/
