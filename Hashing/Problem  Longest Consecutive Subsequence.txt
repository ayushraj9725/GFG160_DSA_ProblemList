Problem : Longest Consecutive Subsequence
LINK : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/hashing-gfg-160/problem/longest-consecutive-subsequence2449

Problem Statement : 
Given an array arr[] of non-negative integers. Find the length of the longest sub-sequence such that elements in the subsequence are consecutive integers, the consecutive numbers can be in any order.

Examples:

Input: arr[] = [2, 6, 1, 9, 4, 5, 3]
Output: 6
Explanation: The consecutive numbers here are 1, 2, 3, 4, 5, 6. These 6 numbers form the longest consecutive subsquence.
Input: arr[] = [1, 9, 3, 10, 4, 20, 2]
Output: 4
Explanation: 1, 2, 3, 4 is the longest consecutive subsequence.
Input: arr[] = [15, 13, 12, 14, 11, 10, 9]
Output: 7
Explanation: The longest consecutive subsequence is 9, 10, 11, 12, 13, 14, 15, which has a length of 7.
Constraints:
1 <= arr.size() <= 105
0 <= arr[i] <= 105

/***************************************************** C++ CODE *********************************************************/

 public:

    // Function to return length of longest subsequence of consecutive integers.
    int longestConsecutive(vector<int>& arr) {
      
        int n = arr.size() ;
      unordered_set<int> set ;
      int res = 0 ;
      // filling all the elemnt of arr in the set 
      for(int num : arr){
          set.insert(num); // after the loop added into set
      }
      // now again iterate the arr and check and count 
      for(int num : arr){
          // check if num present and num - 1 not present in set then start check for counting 
          if(set.find(num-1) == set.end()){
              int cnt = 1 , cur = num ; // cur take and check again and again by + 1 
              while(set.find(cur+1) != set.end()){
                  set.erase(cur);
                  cur++ ;
                  cnt++ ;
              }
          // now update the res with cnt with max 
          res = max(res,cnt); // we want the longest consecutive occurence so we do it 
          }
      }
     return res ; 
      
    /*
       // Your code here
      // Optimized Version of the problem : using HashSet 
      // check the current element containing and current+1 also then consider it so count these here
      // and if not then move ahead and check for next elemt with set elemnt 
      int n = arr.size() ;
      unordered_set<int> set ;
      int res = 0 ;
      // filling all the elemnt of arr in the set 
      for(int num : arr){
          set.insert(num); // after the loop added into set
      }
      // now again iterate the arr and check and count 
      for(int num : arr){
          // check if num present and num - 1 not present in set then start check for counting 
          if(set.find(num) != set.end() && set.find(num-1) == set.end()){
              int cnt = 0 , cur = num ; // cur take and check again and again by + 1 
              while(set.find(cur) != set.end()){
                  set.erase(cur);
                  cur++ ;
                  cnt++ ;
              }
          // now update the res with cnt with max 
          res = max(res,cnt); // we want the longest consecutive occurence so we do it 
          }
      }
     return res ; // here we have the ans 
     // required Time complexity : O(N) and O(N) space complexity 
     
     
     /*   // C++ code of this brute force 
        // sort the array and find the consicutive 
        if(arr.empty()) return 0 ;
        sort(arr.begin(),arr.end()) ;  // O(n logn) time here
        int longestCon = 1 ;
        int Con = 1 ;
        for(int i = 1 ; i < arr.size() ;i++){
            if(arr[i] == arr[i-1]) continue ; // skip duplicates 
            if(arr[i] - arr[i - 1] == 1){
                Con++ ;  // check consecutive 
            }else{
                Con = 1 ; // again reset the con with one for new consecutive 
            }
            //at last we take the longestCon with max
            longestCon = max(longestCon,Con) ; 
        }
        return longestCon ;   // here over all O(nlogn) + O(n) time total 
        */
        }

   int main() {
    vector<int> arr = {2, 6, 1, 9, 4, 5, 3};
    cout << longestConsecutive(arr);
    return 0;
}
};


/******************************************* JAVA CODE ************************************************/

// Java program to find longest consecutive subsequence
import java.util.*;

class GfG {
    static int longestConsecutive(int[] arr) {
        Set<Integer> st = new HashSet<>();
        int res = 0;

        // Hash all the array elements
        for (int val : arr)
            st.add(val);

        // Check each possible sequence from the start then update optimal length
        for (int val : arr) {

            // If current element is the starting element of a sequence
            if (st.contains(val) && !st.contains(val - 1)) {

                // Then check for next elements in the sequence
                int cur = val, cnt = 0;
                while (st.contains(cur)) {

                    // Remove this number to avoid recomputation
                    st.remove(cur);
                    cur++;
                    cnt++;
                }

                // Update optimal length
                res = Math.max(res, cnt);
            }
        }
        return res;
    }

    public static void main(String[] args) {
        int[] arr = {2, 6, 1, 9, 4, 5, 3};
        System.out.println(longestConsecutive(arr));
    }
}

/*************************************************************************************************************************/