Problem : Print Anagrams Together

Link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/hashing-gfg-160/problem/print-anagrams-together

Problem Statement : 
Given an array of strings, return all groups of strings that are anagrams. The groups must be created in order of their appearance in the original array. Look at the sample case for clarification.

Note: The final output will be in lexicographic order.

Examples:

Input: arr[] = ["act", "god", "cat", "dog", "tac"]
Output: [["act", "cat", "tac"], ["god", "dog"]]
Explanation: There are 2 groups of anagrams "god", "dog" make group 1. "act", "cat", "tac" make group 2.

Input: arr[] = ["no", "on", "is"]
Output: [["is"], ["no", "on"]]
Explanation: There are 2 groups of anagrams "is" makes group 1. "no", "on" make group 2.

Input: arr[] = ["listen", "silent", "enlist", "abc", "cab", "bac", "rat", "tar", "art"]
Output: [["abc", "cab", "bac"], ["listen", "silent", "enlist"], ["rat", "tar", "art"]]
Explanation: 
Group 1: "abc", "bac", and "cab" are anagrams.
Group 2: "listen", "silent", and "enlist" are anagrams.
Group 3: "rat", "tar", and "art" are anagrams.
/**************************/

Constraints:
1<= arr.size() <=100
1<= arr[i].size() <=10

/********************/

                                      /***************************** C++  CODE **********************************/
Solution : 
class Solution {
  public:
    vector<vector<string>> anagrams(vector<string>& arr) {
        // code here
        // C++ CODE
        vector<vector<string>> ans  ;
        unordered_map<string,int> map ; // this is taking why storing the key after knowing the correct group , that 
        // that group we identify by soring the string in ith arr 
        for(int i = 0 ; i < arr.size() ; i++){
            string s = arr[i] ;
            // we take the ith String in s and sort them one by one 
            sort(s.begin(),s.end()); // here we sort the s 
            // now we check the sorted s is present in map or not 
            // in empty vector we are adding in the ans 
            // if not present in map then we insert the s into map with their size 
            if(map.find(s) == map.end()){
                map[s] = ans.size() ; // adding the index of ans vector it helps to know group in which we will add string into vector how we know after sorting if key(s) is already in map 
                ans.push_back({}); // adding the empty group of vector in vector 
            }
            // but if key (s) after sorting is already present in the map then we know using its inx value of map value and stored arr[i] current string into the correct group
            ans[map[s]].push_back(arr[i]); // adding the the already key present in map         
        }
        return ans ;
        // Time complexity : O(N ^ 2 logk) and space complexity : O(n*m)
    }
int main() {
    vector<string> arr = {"act", "god", "cat", "dog", "tac"};
    
    vector<vector<string>> res = anagrams(arr);
    for(int i = 0; i < res.size(); i++) {
        for(int j = 0; j < res[i].size(); j++)
            cout << res[i][j] << " ";
        cout << "\n";
    }
    return 0;
}
};

/****************************************************** JAVA CODE *****************************************************************/

class Ayush {
    static ArrayList<ArrayList<String>> anagrams(String[] arr) {
        ArrayList<ArrayList<String>> res = new ArrayList<>();
        HashMap<String, Integer> mp = new HashMap<>();
        
        for (int i = 0; i < arr.length; i++) {
            String s = arr[i];
            
            // Find the key by sorting the string
            char[] chars = s.toCharArray();
            Arrays.sort(chars);
            s = new String(chars);
            
            // If key is not present in the hash map, add
            // an empty group (ArrayList) in the result and
            // store the index of the group in hash map
            if (!mp.containsKey(s)) {
                mp.put(s, res.size());
                res.add(new ArrayList<>());
            }
            
            // Insert the string in its correct group
            res.get(mp.get(s)).add(arr[i]);
        }
        
        return res;
    }

    public static void main(String[] args) {
        String[] arr = {"act", "god", "cat", "dog", "tac"};
        
        ArrayList<ArrayList<String>> res = anagrams(arr);
        for (int i = 0; i < res.size(); i++) {
            for (int j = 0; j < res.get(i).size(); j++)
                System.out.print(res.get(i).get(j) + " ");
            System.out.println();
        }
    }
}
