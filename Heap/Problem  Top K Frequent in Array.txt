Problem : Top K Frequent in Array

Problem Statement : 
Given a non-empty integer array arr[] of size n, find the top k elements which have the highest frequency in the array.

Note: If two numbers have the same frequencies, then the larger number should be given more preference.

Examples:

Input: arr[] = [3, 1, 4, 4, 5, 2, 6, 1], k = 2
Output: [4, 1]
Explanation: Frequency of 4 is 2 and frequency of 1 is 2, these two have the maximum frequency and 4 is larger than 1.

Input: arr[] = [7, 10, 11, 5, 2, 5, 5, 7, 11, 8, 9], k = 4
Output: [5, 11, 7, 10]
Explanation: Frequency of 5 is 3, frequency of 11 is 2, frequency of 7 is 2, frequency of 10 is 1.

Constraints:
1 <= n <= 105
1<= arr[i] <=105
1 <= k <= no. of distinct elements

Company Tags
Amazon   Microsoft

Expected Complexities
Time Complexity : O(n log n)   Auxiliary Space: O(n)  



/************************************************************************* CPP SOLUTION ******************************************************************************/


class Solution {
  public:
    vector<int> topKFrequent(vector<int> &arr, int k) {
        // Your code here
        unordered_map<int,int> map ;
        for(int e : arr){
            map[e]++;
        }
        
        // take priority queue to main tain the max heap so that we can take value and insert in th the ans
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> maxHeap ;
        vector<int> ans(k) ;
        
        // insert the map value into the maxHeap 
        for(pair<int,int> entry : map){
            maxHeap.push({entry.second,entry.first});
            // check if get the heap side greater then k than we pop the map
            if(maxHeap.size() > k) maxHeap.pop();
        }
        
        // now we iterate over the maxHeap and stored value of that in ans variable 
        
        for(int i = k -1 ; i>=0 ; i--){
            ans[i] = maxHeap.top().second;
            maxHeap.pop();
        }
        
        return ans ;
    }
    
};



/************************************************************************* JAVA SOlUTION *****************************************************************************/

import java.util.*;

public class Main {
    public static int[] topKFrequent(int[] arr, int k) {
        // Step 1: Count the frequency of each element
        Map<Integer, Integer> freqMap = new HashMap<>();
        for (int num : arr) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
        }

        // Step 2: Custom comparator for Min-Heap (Sorting by frequency)
        PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> Integer.compare(a[1], b[1]));

        // Step 3: Maintain a heap of size k
        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {
            minHeap.offer(new int[]{entry.getKey(), entry.getValue()});
            if (minHeap.size() > k) {
                minHeap.poll(); // Remove the element with the smallest frequency
            }
        }

        // Step 4: Extract the k most frequent elements
        int[] ans = new int[k];
        for (int i = k - 1; i >= 0; i--) {
            ans[i] = minHeap.poll()[0];
        }

        return ans;
    }

    public static void main(String[] args) {
        int[] arr = {1, 1, 1, 2, 2, 3};
        int k = 2;
        System.out.println(Arrays.toString(topKFrequent(arr, k))); // Output: [1, 2]
    }
}

