Problem : find k closest element 

Leetcode : 658 

Problem Statement GFG :
Given a sorted array of unique elements in increasing order, arr[] of n integers, and a value x. Find the K closest elements to x in arr[].
Keep the following points in mind:

If x is present in the array, then it need not be considered.
If two elements have the same difference as x, the greater element is prioritized.
If sufficient elements are not present on the right side, take elements from the left and vice versa.
 
Example 1:

Input:
n = 13
arr[] = {12, 16, 22, 30, 35, 39, 42, 
         45, 48, 50, 53, 55, 56}
k = 4, x = 35
Output: 39 30 42 45
Explanation: 
First closest element to 35 is 39.
Second closest element to 35 is 30.
Third closest element to 35 is 42.
And fourth closest element to 35 is 45.

Example 2:

Input:
n = 5
arr[] = {1, 2, 3, 6, 10}
k = 3, x = 4
Output: 3 6 2
Explanation: 
First closest element is 3.
There are two elements 2 and 6 for which 
the difference with 4 is same i.e. 2.
So first take greatest number 6 
then the lower number 2.

Your Task:
You don't need to read input or print anything. Complete the function printKClosest() which takes arr[], n, k, and x as input parameters and returns an array of integers containing the K closest elements to x in arr[].


Expected Time Complexity: O(log n + k)
Expected Auxiliary Space: O(k)


Constraints:
1 ≤ n ≤ 105
1 ≤ k ≤ n
1 ≤ x ≤ 106
1 ≤ arr[i] ≤ 106

 

Company Tags
Amazon  OYO Rooms


/************************************************************************ OPTIMAL SOLUTION *********************************************************************/

//////////////// USING BINARY SEARCH 




/********************************************************************** OTHER SOLUTION CPP *********************************************************************/


USING MAX HEAP : PRIORITY QUEUE 


class Solution {
  public:
    vector<int> printKClosest(vector<int> arr, int n, int k, int x) {
        // code here
        priority_queue<pair<int,int>> pq ; // maxHeap 
        
        for(int i = 0 ; i < n ; i ++){
            if(arr[i] == x){
                continue ;
            }
            //otherwise we stored the diff and value ar[i]
            pq.push({abs(arr[i] - x),-arr[i]}) ;
            
            // if size of pq exceeding than k we pop the top od the pq
            if(pq.size() > k){
                pq.pop();
            }
        }
        
        // step 2 : now we have to stored all the result into ans 
        vector<int> ans ; // here we have to not mention any order so just we return in any order
        
        while(!pq.empty()){
            auto p = pq.top();
            pq.pop();
            ans.push_back(-p.second);
        }
        
        // now step 3 :  we have to reverse the ans to return in correct order
        
        reverse(begin(ans),end(ans));
        
        return ans ;
    }
};

// java implementation 


import java.util.*;

class Pair {
    int diff; // Absolute difference with x
    int value; // The actual element

    public Pair(int diff, int value) {
        this.diff = diff;
        this.value = value;
    }
}

public class KClosestElements {
    public static List<Integer> findClosestElements(int[] arr, int k, int x) {
        // Max Heap using custom comparator
        PriorityQueue<Pair> maxHeap = new PriorityQueue<>((a, b) -> {
            if (b.diff != a.diff) {
                return b.diff - a.diff; // Sort by absolute difference in descending order
            }
            return b.value - a.value; // If difference is same, sort by value in descending order
        });

        // Iterate through the array and add elements to the heap
        for (int num : arr) {
            maxHeap.offer(new Pair(Math.abs(num - x), num));

            // Keep heap size <= k
            if (maxHeap.size() > k) {
                maxHeap.poll(); // Remove the farthest element
            }
        }

        // Extract the k closest elements
        List<Integer> result = new ArrayList<>();
        while (!maxHeap.isEmpty()) {
            result.add(maxHeap.poll().value);
        }

        return result;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 6, 10};
        int k = 3;
        int x = 4;

        List<Integer> closestElements = findClosestElements(arr, k, x);
        System.out.println(closestElements); // Output: [2, 3, 6]
    }
}


/*********************************************************************** CPP SOLUTION LEETCODE ***************************************************************/

class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        // using two pinters and sliding windows approach
        int i = 0 , j = arr.size() - 1 ;

        while(j - i + 1 > k){
            if(abs(arr[i] - x) > abs(arr[j] - x)){
                // if get this then we shrink from left because we are looking for closest to x
                i++ ;
            }
            // other wise any condition that is given over there that follow then we shrink from right
            else j-- ;
        }
        // after exceeding k this loop end we have a window btw i and j , btw that we have the kth closest element of the x
        vector<int> ans ;
        // because we are traverse from i to j in given array we follow the order that is sorted so just do that
        for(int index = i ; index <= j ; index++){
            ans.push_back(arr[index]);
        }

        return ans ;  // time complexity only : O(N) and O(K) space for storing the result 
        // another way to solve using the heap priority queue
        // check it out on java code editor 
    }
};

/************************************************************************* JAVA SOLUTION LEETCODE **************************************************************/

// PRIORITY QUEUE 

import java.util.*;

class Pair {
    int diff; // Absolute difference with x
    int value; // The actual element

    public Pair(int diff, int value) {
        this.diff = diff;
        this.value = value;
    }
}

public class KClosestElements {
    public static List<Integer> findClosestElements(int[] arr, int k, int x) {
        // Max Heap using custom comparator
        PriorityQueue<Pair> maxHeap = new PriorityQueue<>((a, b) -> {
            if (b.diff != a.diff) {
                return b.diff - a.diff; // Sort by absolute difference in descending order
            }
            return b.value - a.value; // If difference is same, sort by value in descending order
        });

        // Iterate through the array and add elements to the heap
        for (int num : arr) {
            maxHeap.offer(new Pair(Math.abs(num - x), num));

            // Keep heap size <= k
            if (maxHeap.size() > k) {
                maxHeap.poll(); // Remove the farthest element
            }
        }

        // Extract the k closest elements
        List<Integer> result = new ArrayList<>();
        while (!maxHeap.isEmpty()) {
            result.add(maxHeap.poll().value);
        }

        // Sort the result as required
        Collections.sort(result);
        return result;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 6, 10};
        int k = 3;
        int x = 4;

        List<Integer> closestElements = findClosestElements(arr, k, x);
        System.out.println(closestElements); // Output: [2, 3, 6]
    }
}



/oR


import java.util.*;

public class KClosestElements {
    public static List<Integer> findClosestElements(int[] arr, int k, int x) {
        // Max Heap to store (difference, element) pairs
        PriorityQueue<int[]> maxHeap = new PriorityQueue<>((a, b) -> {
            if (b[0] != a[0]) {
                return b[0] - a[0]; // Sort by absolute difference in descending order
            }
            return b[1] - a[1]; // If difference is same, sort by value in descending order
        });

        // Iterate through the array and add elements to the heap
        for (int num : arr) {
            maxHeap.offer(new int[]{Math.abs(num - x), num});

            // Keep heap size <= k
            if (maxHeap.size() > k) {
                maxHeap.poll(); // Remove the farthest element
            }
        }

        // Extract the k closest elements
        List<Integer> result = new ArrayList<>();
        while (!maxHeap.isEmpty()) {
            result.add(maxHeap.poll()[1]);
        }

        // Sort the result as required
        Collections.sort(result);
        return result;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 6, 10};
        int k = 3;
        int x = 4;

        List<Integer> closestElements = findClosestElements(arr, k, x);
        System.out.println(closestElements); // Output: [2, 3, 6]
    }
}

 