Problem : Find length of Loop

Problem Statement :

Input: head: 1 → 2 → 3 → 4 → 5, c = 2
Output: 4
Explanation: There exists a loop in the linked list and the length of the loop is 4.

Input: head: 25 → 14 → 19 → 33 → 10 → 21 → 39 → 90 → 58 → 45, c = 4
Output: 7
Explanation: The loop is from 33 to 45. So length of loop is 33 → 10 → 21 → 39 → 90 → 58 → 45 = 7.
The number 33 is connected to the last node of the linkedlist to form the loop because according to the input the 4th node from the beginning(1 based indexing) 
will be connected to the last node in the LinkedList.

Input: head: 0 → 1 → 2 → 3, c = 0
Output: 0
Explanation: There is no loop.

Constraints:
1 ≤ no. of nodes ≤ 106
0 ≤ node.data ≤ 106
0 ≤ c ≤ n-1

Expected Complexities
Time Complexity: O(n)
Auxiliary Space: O(1)


Company Tags
Amazon  Adobe  Qualcomm

/************************************************************************* SOLUTION CPP IMPLEMENTATION ***************************************************/


struct Node {
    int data;
    struct Node *next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/
class Solution {
  public:
    // Function to find the length of a loop in the linked list.
    int loopLength(Node* turtle, Node* rabbit){
        int count = 1;
        rabbit= rabbit->next;
        while(rabbit!=turtle){
            count++;
            rabbit=rabbit->next;
        }
        return count ;
    }
    int countNodesinLoop(Node *head) {
        // Code here
        Node* turtle = head;
        Node* rabbit = head;
        
        while(rabbit != NULL && rabbit ->next != NULL){
            turtle = turtle->next;
            rabbit = rabbit -> next->next;
            if(turtle == rabbit){
                return loopLength(turtle,rabbit);
            }
        }
        
        return 0 ;
    }
};