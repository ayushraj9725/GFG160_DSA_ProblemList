Problem : Rotate a Linked List

Problem Link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/linked-list-gfg-160/problem/rotate-a-linked-list

Problem Statement : Given the head of a singly linked list, your task is to left rotate the linked list k times.

Examples:

Input: head = 10 -> 20 -> 30 -> 40 -> 50, k = 4
Output: 50 -> 10 -> 20 -> 30 -> 40
Explanation:
Rotate 1: 20 -> 30 -> 40 -> 50 -> 10
Rotate 2: 30 -> 40 -> 50 -> 10 -> 20
Rotate 3: 40 -> 50 -> 10 -> 20 -> 30
Rotate 4: 50 -> 10 -> 20 -> 30 -> 40

Input: head = 10 -> 20 -> 30 -> 40 , k = 6
Output: 30 -> 40 -> 10 -> 20 
 
Constraints:

1 <= number of nodes <= 105
0 <= k <= 109
0 <= data of node <= 109
////////////////////////////////////////
Company Tags
Accolite Amazon Microsoft MakeMyTrip
////////////////////////////////////////

CODE AND SOLUTION : ::::::::::::::::::::::::::::::::::::::::::::: : C++ CODE : :::::::::::::::::::::::::::::::::::::::::::::::::::::::::

// Rotate a Linked List

struct Node {
    int data;
    Node* next;
};

Node* rotate(Node* head, int k) {
    if (!head || k == 0) return head; // Handle empty list or no rotation

    // Step 1: Calculate length and connect the list into a circle
    Node* temp = head;
    int length = 1;

    while (temp->next) {
        temp = temp->next;
        length++;
    }
    temp->next = head; // Make the list circular

    // Step 2: Optimize k
    k = k % length; // If k >= length, take modulo
    if (k == 0) {   // If no rotation is needed, break the circle and return head
        temp->next = nullptr;
        return head;
    }

    // Step 3: Find the new tail
    int stepsToNewTail = k; // Traverse k steps to find the new tail
    Node* newTail = head;

    for (int i = 1; i < stepsToNewTail; i++) { // Move to the k-th node
        newTail = newTail->next;
    }

    Node* newHead = newTail->next; // New head is the next of new tail
    newTail->next = nullptr;       // Break the circle

    return newHead; // Return the new head of the rotated list
}


/********************************************************** JAVA CODE *******************************************************************/

class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class LinkedList {
    public Node rotate(Node head, int k) {
        if (head == null || k == 0) return head; // Handle empty list or no rotation

        // Step 1: Calculate length and connect the list into a circle
        Node temp = head;
        int length = 1;

        while (temp.next != null) {
            temp = temp.next;
            length++;
        }
        temp.next = head; // Make the list circular

        // Step 2: Optimize k
        k = k % length; // If k >= length, take modulo
        if (k == 0) {   // If no rotation is needed, break the circle and return head
            temp.next = null;
            return head;
        }

        // Step 3: Find the new tail
        int stepsToNewTail = k; // Traverse (k) steps to find the new tail
        Node newTail = head;

        for (int i = 1; i < stepsToNewTail; i++) {
            newTail = newTail.next;
        }

        Node newHead = newTail.next; // New head is the next of new tail
        newTail.next = null;         // Break the circle

        return newHead; // Return the new head of the rotated list
    }
}
/****************************************************************************************************************************************/