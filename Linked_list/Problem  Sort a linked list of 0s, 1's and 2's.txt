Problem : Sort a linked list of 0s, 1s and 2s

Problem statement :
Given the head of a linked list where nodes can contain values 0s, 1s, and 2s only. Your task is to rearrange the list so that all 0s appear at the beginning, followed by all 1s, and all 2s are placed at the end.

Examples:

Input: head = 1 → 2 → 2 → 1 → 2 → 0 → 2 → 2

Output: 0 → 1 → 1 → 2 → 2 → 2 → 2 → 2

Explanation: All the 0s are segregated to the left end of the linked list, 2s to the right end of the list, and 1s in between.
Input: head = 2 → 2 → 0 → 1

Output: 0 → 1 → 2 → 2

Explanation: After arranging all the 0s, 1s and 2s in the given format, the output will be 0 → 1 → 2 → 2.


Constraints:
1 ≤ no. of nodes ≤ 106
0 ≤ node->data ≤ 2

Expected Complexities

Time Complexity: O(n)
Auxiliary Space: O(n)


Company Tags
Amazon  Microsoft  MakeMyTrip


/********************************************************************* SOLUTION ********************************************************************************/

C++ IMPLEMENTATION 

/*  Node is defined as
  struct Node {
    int data;
    struct Node *next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};*/
class Solution {
  public:
    Node* segregate(Node* head) {
        // code here
        int zeros = 0 , ones = 0 ,twos = 0 ;
        Node* temp=head ;
        // in O(N) time we iterate entire linked list and count 0's , 1's and 2's 
        while(temp){
            if(temp -> data == 0) zeros++ ;
            else if(temp -> data == 1) ones++ ;
            else twos++ ;
            
            temp = temp -> next ;
        }
        
        // now in O(N) time we put those in correct manner 
        
        temp = head ;
        // putting first zeros 
        while(zeros){
            temp->data = 0 ;
            zeros-- ;
            temp = temp->next ;
        }
        
        // than ones putting 
        while(ones){
            temp->data = 1 ;
            ones-- ;
            temp = temp->next ;
        }
        
        // and than putting twos 
        while(twos){
            temp->data = 2 ;
            twos-- ;
            temp = temp->next ;
        }
        
        return head ;
    }
};


/******************************************************************* JAVA IMPLEMENTATIONS  ***********************************************************************/

class Solution {
    static Node segregate(Node head) {
        // code here
         int zeros=0, ones=0, twos=0;
        Node head1=head;
        while(head1!=null){
            if(head1.data==0){
                zeros++;
            }
            if(head1.data==1){
                ones++;
            }
            if(head1.data==2){
                twos++;
            }
            head1=head1.next;
        }
        head1=head;
        while(head1 !=null){
            if(zeros != 0){
                head1.data=0;
                zeros--;
            }
           else if(ones != 0){
                head1.data=1;
                ones--;
            }
           else if(twos != 0){
                head1.data=2;
                twos--;
            }
            head1=head1.next;
        }
        return head;
    }