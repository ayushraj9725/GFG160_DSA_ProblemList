Problem : Longest Subarray with Majority Greater than K

Problem Link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/prefix-sum-bonus-problem/problem/longest-subarray-with-majority-greater-than-k

Problem Statemen t: 
Given an array arr[] and an integer k, the task is to find the length of longest subarray in which the count of elements greater than k is more than the count of elements less than or equal to k.

Examples:

Input: arr[] = [1, 2, 3, 4, 1] , k = 2
Output: 3
Explanation: The subarray [2, 3, 4] or [3, 4, 1] satisfy the given condition, and there is no subarray of length 4 or 5 which will hold the given condition, so the answer is 3.

Input: arr[] = [6, 5, 3, 4], k = 2
Output: 4
Explanation: In the subarray [6, 5, 3, 4], there are 4 elements > 2 and 0 elements <= 2, so it is the longest subarray.

Constraints:
1 <= arr.size() <= 106
1 <= arr[i] <= 106

/********************************************************* CPP CODE *********************************************************************/

class Solution {
  public:
    int longestSubarray(vector<int> &arr, int k) {
        // Code here
     // Optimized version of this solution use prefix sum and before that we have to pre compute that like this 
      // in 1st step we need to update the array / so we can compute the prefix sum over here , so that we are doing 
      int n = arr.size() ;
      for(int i = 0 ; i < n ; i++){
          arr[i] = (arr[i] > k) ? 1 : -1 ; // we put at index if found greater than k put +1 after that if found less or equal put -1
      }
      // now in 2nd step we are going to apply the prefix sum
      // take a map to fix the sum 
      int max_subarr = 0 ;
      unordered_map<int ,int > map ;
      int preSum = 0 ;
      // we are fixing the 0th index with -1 to handle the edges cases 
      map[0] = -1 ;
      
      for(int i = 0 ; i < n ; i++){
          preSum += arr[i] ;
          
          if(preSum > 0){
              max_subarr = max(max_subarr , i + 1) ;
          }
          
          if(map.find(preSum - 1) != map.end()){ // if found the preSum as key in map then take the index 
          
              max_subarr = max(max_subarr , i - map[preSum - 1]) ;
          }
          // if not found in the map then we put the preSum int to the map
          if(map.find(preSum) == map.end()){
              map[preSum] = i ; // with i we initilized
          }
      }
      
      // now we will return the answer '
      return max_subarr ;
      
     /*  /// Brute Force SOlution 
        // Basically we are generating all the subarray and check for all element is greatrer than k then we willl cosnsider that to count
        // otherwise when we found less than equal to k then we dont care about that so count tmep we will  decrement 
        // We are figure aout over here (No of elment in subrray > k) > ( no of elemnt of given array in subrrray <= k) => only find that subarray length
         int count_all = 0 ;
          int n = arr.size() ;
          for(int i = 0 ; i < n ; i++){
              int count = 0 ; // temparary count 
              for(int j = i ; j < n ; j++){
                  if(arr[j] > k){
                      
                      count++ ;
                  }
                  else{
                      count-- ; // we decrece the size of subarray so we decrement this count
                  }
                  // if we found any time count +ve so consider there is some length of subarray containning in array so we maximize the length of subrayya and storing in this 
                   if(count > 0){
                       count_all = max(count_all,j-i+1) ;
                   }
              }
          }
          
          return count_all ;
          // Time complexity : O(N^2) and Space Complexity : O(1) !
          
          */
          
          
    }
};

/*************************************************************************************************************************************** /