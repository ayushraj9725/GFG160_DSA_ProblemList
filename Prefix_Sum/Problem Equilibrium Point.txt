Problem : Equilibrium Point
Problem Link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/prefix-sum-gfg-160/problem/equilibrium-point-1587115620

Problem Statement : 
Given an array arr[] of non-negative numbers. The task is to find the first equilibrium point in the array.

The equilibrium point in an array is an index (0-based indexing) such that the sum of all elements before that index is the same as the sum of elements after it. Return -1 if no such point exists. 

Examples:

Input: arr[] = [1, 2, 0, 3]
Output: 2 
Explanation: The sum of left of index 2 is 1 + 2 = 3 and sum on right of index 2 is 0 + 3 = 3.

Input: arr[] = [1, 1, 1, 1]
Output: -1
Explanation: There is no equilibrium index in the array.
////////////////////////////
Input: arr[] = [-7, 1, 5, 2, -4, 3, 0]
Output: 3
Explanation: The sum of left of index 3 is -7 + 1 + 5 = -1 and sum on right of index 3 is -4 + 3 + 0 = -1.
////////////////////////////
Constraints:
3 <= arr.size() <= 106
0 <= arr[i] <= 109
////////////////////////////


CODE SOLUTION : PREFIX SUM : :::::::::::::::::::::::::: : :::::::::::::::::: : C++ CODE : ::::::::::::::::::::::: : ::::::::::::::::::::::

class Solution {
  public:
    // Function to find equilibrium point in the array.
    int findEquilibrium(vector<int> &arr) {
        // code here
     /*   // Brute force solution 
        int n = arr.size() ;
        for(int i = 1 ; i <= n - 2 ; i++){
            int preSum = 0 ;
            for(int j = 0 ; j < i ; j++){
                preSum += arr[j] ;
            }
            int rightSum = 0 ;
            for(int j = i+1 ; j <= n - 1 ; j++){
                rightSum += arr[j] ;
            }
            
            if(preSum == rightSum) return i ;
        }
        
        return -1 ; // Brute force taking more time O(N^2) time  so we move to the optimla solution 
       */
        // using the Prefix Sum appraoch 
        
        int n = arr.size() ;
        int leftSum = 0 ;
        int rightSum = 0 ;
        // finding this time total sum here 
        int totalSum = 0 ;
        for(int i = 0 ; i < n ; i++){
            totalSum += arr[i] ; 
        }
        // now we apply the logic 
        for(int i = 0 ; i < n ; i++){
            rightSum = totalSum - leftSum - arr[i] ;
            if(rightSum == leftSum) return i ;
            // now if not found then update the leftSum 
            leftSum += arr[i] ; //  here we update this 
        }
        
        return -1 ;
        
    }
};

/**********************************************************************************************************************************/

