Problem : Longest Bounded-Difference Subarray

Problem Statement : 
Given an array of positive integers arr[] and a non-negative integer x, the task is to find the longest sub-array where the absolute difference between any two elements is not greater than x.
If multiple such subarrays exist, return the one that starts at the smallest index.

Examples: 

Input: arr[] = [8, 4, 2, 6, 7], x = 4 
Output: [4, 2, 6] 
Explanation: The sub-array described by index [1..3], i.e. [4, 2, 6] contains no such difference of two elements which is greater than 4.

Input: arr[] = [15, 10, 1, 2, 4, 7, 2], x = 5 
Output: [2, 4, 7, 2] 
Explanation: The sub-array described by indexes [3..6], i.e. [2, 4, 7, 2] contains no such difference of two elements which is greater than 5. 

Constraints:
1 <= arr.size() <= 105
1 <= arr[i] <= 109
0 <= x<= 109

Expected Complexities
Time Complexity : O(n)Auxiliary Space : O(n)

/******************************************************************************** CPP SOLUTION OPTIMAL **********************************************************/

class Solution {
  public:
    vector<int> longestSubarray(vector<int>& arr, int x) {
        // code here
        deque<int> mindq,maxdq ;
        int s = 0 , e = 0 ;
        
        int ansStart = 0 , ansEnd = 0 ;
        vector<int> ans ;
        int n = arr.size();
        
        while(e<n){
            while(!mindq.empty() && arr[mindq.back()] > arr[e]) mindq.pop_back();
            while(!maxdq.empty() && arr[maxdq.back()] < arr[e]) maxdq.pop_back();
            mindq.push_back(e);
            maxdq.push_back(e);
            
            while(arr[maxdq.front()]-arr[mindq.front()] > x){
                if(s==maxdq.front()) maxdq.pop_front();
                if(s==mindq.front()) mindq.pop_front();
                s++ ;
            }
            if(e-s>ansEnd-ansStart){
                ansEnd = e ;
                ansStart = s ;
                
            }
            e++ ;
        }
        for(int i = ansStart ; i<= ansEnd;i++){
            ans.push_back(arr[i]);
        }
        
        return ans ;
    }
};