Problem : Kth Missing Positive Number in a Sorted Array 
Link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/searching-gfg-160/problem/kth-missing-positive-number-in-a-sorted-array 

Problem Statement : 
Given a sorted array of distinct positive integers arr[], we need to find the kth positive number that is missing from arr[].  

Examples :
Input: arr[] = [2, 3, 4, 7, 11], k = 5
Output: 9
Explanation: Missing are 1, 5, 6, 8, 9, 10… and 5th missing number is 9.

Input: arr[] = [1, 2, 3], k = 2
Output: 5
Explanation: Missing are 4, 5, 6… and 2nd missing number is 5.

Input: arr[] = [3, 5, 9, 10, 11, 12], k = 2
Output: 2
Explanation: Missing are 1, 2, 4, 6… and 2nd missing number is 2.

/************/

Constraints:
1 <= arr.size() <= 105
1 <= k <= 105
1 <= arr[i]<= 106

/**********************************************************  SOLUTIONS  *******************************************************/


int kthMissing(vector<int> &arr, int k) {
       // OPTIMAL SOLUTION - BINARY SEARCH (logn) time 
       
       int n = arr.size() ;
       int low  = 0 , high = n - 1 ;
       while(low <= high){
           int mid = low + (high - low) / 2 ;
           
           if(arr[mid] - (mid + 1) < k){
               low = mid + 1 ; // trim the left part if we get what number missing before the particular index or mid 
               
           }else high = mid - 1 ; // trim the right half if left part not trimd 
       }
       
       return high + 1 + k ; // or return low + k 
       
       
/******************/ 

       /* //  Brute Force 
        for(int i = 0 ; i < arr.size() ;i++){
            if(arr[i] <= k) {
                k++ ;
                
            }else break ;
           // if(arr[i] > k) break ;
        }
        return k ;
        
        // Time complexity : O(N) in worst Case because it takes N element for searching linearly 
        
        */

/******************************************************** ENDS ************************************************************/ 
