Problem : Allocation Books : Link -> https://www.geeksforgeeks.org/batch/gfg-160-problems/track/searching-gfg-160/problem/allocate-minimum-number-of-pages0937

Problem Statement : 
You are given an array arr[] of integers, where each element arr[i] represents the number of pages in the ith book. You also have an integer k representing the number of students. The task is to allocate books to each student such that:

Each student receives atleast one book.
Each student is assigned a contiguous sequence of books.
No book is assigned to more than one student.
The objective is to minimize the maximum number of pages assigned to any student. In other words, out of all possible allocations, find the arrangement where the student who receives the most pages still has the smallest possible maximum.

Note: Return -1 if a valid assignment is not possible, and allotment should be in contiguous order (see the explanation for better understanding).

Examples:

Input: arr[] = [12, 34, 67, 90], k = 2
Output: 113
Explanation: Allocation can be done in following ways:
[12] and [34, 67, 90] Maximum Pages = 191
[12, 34] and [67, 90] Maximum Pages = 157
[12, 34, 67] and [90] Maximum Pages = 113.
Therefore, the minimum of these cases is 113, which is selected as the output.
Input: arr[] = [15, 17, 20], k = 5
Output: -1
Explanation: Allocation can not be done.
Input: arr[] = [22, 23, 67], k = 1
Output: 112

/***********************************************************************/

// Brute force please check the Binary Search Notes important Questions  




                                                *************  OPTIMAL SOLUTION **************



nt ReqBook(vector<int>& arr, int pages){
        int student = 1 , pageStudent = 0 ;
        for(int i = 0 ; i < arr.size(); i++){
            if(pageStudent + arr[i] <= pages){
                pageStudent += arr[i] ; // here merging and find the contigious alllocatiion
            }
            else{
                student++ ;
                pageStudent  = arr[i]; // if not fit for student page requried to page the that page of arr put into next studdent so here we update
            }
        }
        return student ;  // if this student is exact equal to the given student that mean book allocated and that is in contigious manner not voilating the things condition given 
    }
    int findPages(vector<int> &arr, int k) {
        // OPTIMAL SOLUTION USING BINARY SEARCH 
        // we have to define range for this binary search from which value to till whioch value it wiil go 
        int low = INT_MIN , high = 0 ;
        if(arr.size() < k) return -1 ;  // this is the case when book get more than the no of students so we return -1 
        // low will be the max of arr given pages and high is the total no of pages in array 
        for(int i = 0 ; i < arr.size() ;i++){
            low = max(low,arr[i]);
            high = high + arr[i];   // here the end of the loop we have the range 
        }
        
        // now we apply the Binary Search 
        int ans = -1 ;
        while(low <= high){
            int mid = low + (high - low) / 2 ; // mid is the pages
            
            int cntBook = ReqBook(arr,mid); // calling the method providing pages and arr
            
            if(cntBook <= k){
                ans = mid ;
                high = mid - 1 ; //  because we want to minimize the overall value so we have to trim right part 
            }
            else{
                low = mid + 1 ; // otherwise we trim the left half 
            }
        }
        // after the end of the binary search we will get the answer
        return ans ;
    } 