Problem : Missing element of AP


Problem statement : 
Given a sorted array arr[] that represents an Arithmetic Progression (AP) with exactly one missing element, find the missing number.

Note: An element will always exist that, upon inserting into a sequence forms Arithmetic progression. If the given sequence already forms a valid complete AP, return the (n+1)-th element that would come next in the sequence.

Examples:

Input: arr[] = [2, 4, 8, 10, 12, 14]
Output: 6
Explanation: Actual AP should be 2, 4, 6, 8, 10, 12, 14.

Input: arr[] = [1, 6, 11, 16, 21, 31]
Output: 26
Explanation: Actual AP should be 1, 6, 11, 16, 21, 26, 31.

Input: arr[] = [4, 7, 10, 13, 16]
Output: 19
Explanation: Since the sequence already forms a valid AP, the next element after 16 in the sequence would be 19. Therefore, the output is 19.

Constraints:
2 ≤ arr.size() ≤ 105
0 ≤ arr[i] ≤ 2*107

Expected Complexities
Time Complexity : O(log n)
Auxiliary Space: O(1)


/***************************************************************************** solutions **********************************************************************/

optimal solution :  binary search 

class Solution {
  public:
    int findMissing(vector<int> &arr) {
   

 int diff = (arr[1] - arr[0] == arr[n-1] - arr[n-2]) ? arr[1] - arr[0] : 
          ((arr[1] - arr[0] == (arr[n-1] - arr[0])/n) ? arr[1] - arr[0] : 
           arr[n-1] - arr[n-2]);
    
    if(diff == 0)
        return arr[0];
    
  	int lo = 0, hi = n - 1;
  
    while (lo <= hi) {     
      	int mid = (lo + hi) / 2;
      
        // if mid == (nth position of element in AP)-1
        // the missing element will exist in right half 
        if ((arr[mid] - arr[0]) / diff == mid)
            lo = mid + 1;
      	
      	// the missing element will exist in left half
        else
            hi = mid - 1;
    }
  
    // after breaking out of binary search loop the missing element
  	// will exist between high and low
    return arr[hi] + diff;



//////////////////////////////////////////////////////////// brute force ///////////////////////////////////////////////////////////////////////////


class Solution {
  public:
    int findMissing(vector<int> &arr) {
        // code here
        // linearly we can find in : O(N) time how algo work
      // simple we use the mathematical formula 
      
    int n = arr.size();
    int diff = (arr[1] - arr[0] == arr[n-1] - arr[n-2]) ? arr[1] - arr[0] : 
              ((arr[1] - arr[0] == (arr[n-1] - arr[0])/n) ? arr[1] - arr[0] : arr[n-1] - arr[n-2]);

    if(diff == 0) return arr[0] ;
    
    // now find the ap sum nth
    
    long long nth_sum = (2LL * arr[0] + n * diff) * (n + 1) / 2;
    
    // calculate the array sum 
    
    int sum = 0 ;
    for(int i = 0 ; i < n ; i++){
        sum += arr[i];
    }
    
    return sum - nth_sum ;
    
    
    
    
      /*  int n = arr.size();
        int snum = arr[0];
        int diff = arr[1] - arr[0];
        
        for(int i = 1 ; i < n ; i++){
            int curr_num = snum + (i*diff) ;
            if(curr_num != arr[i]) return curr_num ;
        }
        // if still not found that means there is no missing  any number in AP
        // so we souuld return the last num that is 
        
        return arr[n-1] + diff ;
        
        // there are some minor mistake here so above is the correct
        
        */
    }
};



