Problem : Sorted and Rotated Minimum : link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/searching-gfg-160/problem/minimum-element-in-a-sorted-and-rotated-array3611

Problem Statement :
A sorted array of distinct elements arr[] is rotated at some unknown point, the task is to find the minimum element in it. 

Examples:

Input: arr[] = [5, 6, 1, 2, 3, 4]
Output: 1
Explanation: 1 is the minimum element in the array.
Input: arr[] = [3, 1, 2]
Output: 1
Explanation: Here 1 is the minimum element.
Input: arr[] = [4, 2, 3]
Output: 2
Explanation: Here 2 is the minimum element.

/*******************************************************************/

Code : Optimal Solution : Binary Search Technique 
 int findMin(vector<int>& arr) {
        // complete the function here
        int low = 0 , high = arr.size() - 1 ;
       // int ans = Integer.MIN_VALUE ;
        while(low < high){
            int mid = low + (high - low)/2 ;
            
            if(arr[mid] > arr[high]){
                low = mid + 1 ;
            }
            else high = mid ;
        }
        // after the end of the loop i point which wlwmwnt that is the minimest 
        
        return arr[low] ;
    }

// Time complexity : O(logn) with space complexity : O(1) .

/************************************************************************

another way to implement 
 
    int findMin(vector<int>& arr){
         int low = 0 , high = arr.size() - 1 ;
         int min = INT_MIN ;
         while(low <= high){
               int mid = low + (high - low) / 2 ;
               if(arr[mid] <= arr[high]){
                   min = min(arr[mid],min) ;
                   high = mid - 1 ;
               }else{
                   min = min(arr[low],min);
                   low = mid + 1 ;
                 }
              
         }
    }


/&&&&&&&&&&&&&&************************&&&&&&&&&&&&&&&&&&&&/
