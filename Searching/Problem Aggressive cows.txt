Problem Aggressive cows : link  : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/searching-gfg-160/problem/aggressive-cows

Problem Statement : 
You are given an array with unique elements of stalls[], which denote the position of a stall. You are also given an integer k which denotes the number of aggressive cows. Your task is to assign stalls to k cows such that the minimum distance between any two of them is the maximum possible.

Examples :

Input: stalls[] = [1, 2, 4, 8, 9], k = 3
Output: 3
Explanation: The first cow can be placed at stalls[0], 
the second cow can be placed at stalls[2] and 
the third cow can be placed at stalls[3]. 
The minimum distance between cows, in this case, is 3, which also is the largest among all possible ways.
Input: stalls[] = [10, 1, 2, 7, 5], k = 3
Output: 4
Explanation: The first cow can be placed at stalls[0],
the second cow can be placed at stalls[1] and
the third cow can be placed at stalls[4].
The minimum distance between cows, in this case, is 4, which also is the largest among all possible ways.
Input: stalls[] = [2, 12, 11, 3, 26, 7], k = 5
Output: 1
Explanation: Each cow can be placed in any of the stalls, as the no. of stalls are exactly equal to the number of cows.
The minimum distance between cows, in this case, is 1, which also is the largest among all possible ways.
Constraints:
2 <= stalls.size() <= 106
0 <= stalls[i] <= 108
1 <= k <= stalls.size()

/*****************************************************************/

Solution : and COde : Binary search // hard Problem  

int isPossible(vector<int>& arr , int dist ,int cows){
          // initially cow that 1st cow put it always at 1st place / stalls
          int cntCows = 1 , lastStalls = arr[0];
          for(int i = 1 ; i < arr.size() ; i++){
                if(arr[i] - lastStalls >= dist){  // if distance that will possible to fix the maintaining the distance
                
                    cntCows++ ;  // cow will increase for next stall staying
                    lastStalls = arr[i];
                }
                
                if(cntCows >= cows)  return true ;
          }
          return false ;
    }
    int aggressiveCows(vector<int> &stalls, int k) {

        // Optimal Solution using binary search 
         sort(stalls.begin(),stalls.end()); // sort the array initially 
         
         int ans = -1 ;
         int low = 0 , high = stalls[stalls.size()-1] - stalls[0] ; // max distance will be max - min
         
         while(low <= high){
             int mid = low + (high - low) / 2;
             
             if(isPossible(stalls,mid,k)){
                 ans = mid ;  // distance that is possible to fix minimum
                 low = mid + 1 ;// trim left half because check for the max distance 
             }else  high = mid - 1 ; // otherwise trim the right half
         }
         
         return ans ;

