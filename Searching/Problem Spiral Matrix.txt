Problem : Spiral Matrix 
link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/matrix-gfg-160/problem/spirally-traversing-a-matrix-1587115621

Problem Statement : 
Spirally traversing a matrix
Difficulty: MediumAccuracy: 35.2%Submissions: 293K+Points: 4
You are given a rectangular matrix mat[][] of size n x m, and your task is to return an array while traversing the matrix in spiral form.

Examples:

Input: mat[][] = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
Output: [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]
Explanation: 

Input: mat[][] = [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18]]
Output: [1, 2, 3, 4, 5, 6, 12, 18, 17, 16, 15, 14, 13, 7, 8, 9, 10, 11]
Explanation: Applying same technique as shown above.

Input: mat[][] = [[32, 44, 27, 23], [54, 28, 50, 62]]
Output: [32, 44, 27, 23, 62, 50, 28, 54]
Explanation: Applying same technique as shown above, output will be [32, 44, 27, 23, 62, 50, 28, 54].

/************/
Constraints:
1 <= n, m <= 1000
0 <= mat[i][j]<= 100

/**********************************************************  SOLUTIONS  *******************************************************/
 vector<int> spirallyTraverse(vector<vector<int> > &mat) {
        // code here 
        int n = mat.size();
        int m = mat[0].size();
        int top = 0 , bottom = n - 1 , left = 0 , right = m - 1 ;
        
        // take a list and store that into this 
        vector<int> ans ;
        
        while(top <= bottom && left <= right){
            // traverse first top element left to right 
            for(int i = left ; i <= right ; i++){
                ans.push_back(mat[top][i]);
            }
            // now do top ++ increment 
            top++ ;
            // now we traverse the outter right move through the top to right 
            for(int i = top ; i <= bottom ; i++ ){
                ans.push_back(mat[i][right]);
            }
            // now decrement thr right for nest line 
            right-- ;
            
            // now triverse the bottom part move from righ to left 
            if(top <= bottom){
                for(int i = right ; i >= left ;i--){
                    ans.push_back(mat[bottom][i]);
                }
                // now decrement the bottom
                bottom-- ;
            }
            // traverse the left most line in matrix from bottom to top
            if(left <= right){
                for(int i = bottom ; i >= top ; i--){
                    ans.push_back(mat[i][left]);
                }
                left++ ;
            } // after the end of the while loop we have the answer list that is the final result 
            
        }
        return ans ;
        
    }


/******************************************************** ENDS *************************************************************/ 
