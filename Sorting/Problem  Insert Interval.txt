Problem : Insert Interval : Link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/sorting-gfg-160/problem/insert-interval-1666733333    : 

Problem statement : Geek has an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent
the start and the end of the ith event and intervals is sorted in ascending order by starti. He wants to add a new interval newInterval= [newStart, newEnd] 
where newStart and newEnd represent the start and end of this interval.

Help Geek to insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping
intervals (merge overlapping intervals if necessary).

Examples:
Input: intervals = [[1,3], [4,5], [6,7], [8,10]], newInterval = [5,6]
Output: [[1,3], [4,7], [8,10]]
Explanation: The newInterval [5,6] overlaps with [4,5] and [6,7].

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,9]
Output: [[1,2], [3,10], [12,16]]
Explanation: The new interval [4,9] overlaps with [3,5],[6,7],[8,10].

/************************/
Code : 
 static ArrayList<int[]> insertInterval(int[][] intervals, int[] newInterval) {
        
        ArrayList<int[]> ans = new ArrayList<>();
        Arrays.sort(intervals,(a,b) -> a[0] - b[0]);
        
        int i = 0 ;
        int n = intervals.length ;
        
         // taking take interval which is not overlapping 
         while(i < n && intervals[i][1] < newInterval[0]){
             ans.add(intervals[i]);
             i++ ; // if found any ivterval which is not overlapping then we again add into ans 
         }
         // now we are taking overlapping interval and merge them 
         while(i < n && intervals[i][0] <= newInterval[1]){
             newInterval[0] = Math.min(intervals[i][0], newInterval[0]); // we are minimizing again and again found overlapping intervals , do minimal value and make newInterval starting 
             newInterval[1] = Math.max(intervals[i][1], newInterval[1]);// here macimize the last bound in new Interval ending Point 
             i++ ; // i increment and check agin if any interval more overlapping or not , if yes then again do same thing , if no then go out of the loop and add that newInterval into ans
             
         }
          ans.add(newInterval);
          
          // now if any interval remains after overlapping and merging so we have to add them also 
          while(i < n){
              ans.add(intervals[i]);
              i++ ; // and do it again and again remains 
          }
          
          // now at the end we will get the answer and return now 
          return ans ;  // Time comp : O(N) and Space comp : O(N)
    }