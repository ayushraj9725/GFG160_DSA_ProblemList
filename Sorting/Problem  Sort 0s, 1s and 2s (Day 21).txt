Problem : Sort 0s, 1s and 2s (Day 21) : Link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/sorting-gfg-160/problem/sort-an-array-of-0s-1s-and-2s4231

Problem statement : Given an array arr[] containing only 0s, 1s, and 2s. Sort the array in ascending order.

Examples:
Input: arr[] = [0, 1, 2, 0, 1, 2]
Output: [0, 0, 1, 1, 2, 2]
Explanation: 0s 1s and 2s are segregated into ascending order.

Input: arr[] = [0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1]
Output: [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2]
Explanation: 0s 1s and 2s are segregated into ascending order.

Constraints:
1 <= arr.size() <= 106
0 <= arr[i] <= 2

/***********************/
Brute Force   :  Used native approach to sort directly every thing in O(hlogn) time
code : 
/***********************/
Better Solution : To use extra space and do it into O(N) time and O(N) space . 
Code : 
/***********************/
Optimal Solution : Dutch National Flag Algorithm
Code : 
 public void swap(int[] arr, int i , int j){
          int temp = arr[i];
          arr[i] = arr[j];
          arr[j] = temp ;
    }
    public void sort012(int[] arr) {
        // code here  
        int n = arr.length ;
        int low = 0 , mid = 0 , high = n - 1 ;
        
        while(mid <= high){
              if(arr[mid] == 0){
                  swap(arr,mid,low);
                  low++;
                  mid++;
              }
              else if(arr[mid] == 1){
                  mid++; // nothing change only increment the mid ,do not change low and high this time
              }
              else{
                  swap(arr,mid,high);
               //   mid++ ;
                  high-- ;
              }
        }
    