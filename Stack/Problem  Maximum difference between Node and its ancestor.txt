Problem : Maximum difference between node and its ancestor

Problem Statement :
Given a Binary Tree, you need to find the maximum value which you can get by subtracting the value of node B from the value of node A, where A and B are two nodes of the binary tree and A is an ancestor of B. 

Examples :

Input:
    5
 /    \
2      1
Output: 4
Explanation:The maximum difference we can get is 4, which is bewteen 5 and 1.
Input:
      1
    /    \
   2      3
           \
            7
Output: -1
Explanation:The maximum difference we can get is -1, which is between 1 and 2.
Expected Time Complexity: O(N).
Expected Auxiliary Space: O(H).
Note: H is the height of the tree.

Constraints:
2 <= Number of edges <= 104
0 <= Data of a node <= 105

Note: The Input/Output format and Examples given are used for the system's internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from the stdin/console. The task is to complete the function specified, and not to write the full code.

Company Tags
Amazon

Time Complexity : O(N)  and Space Comp : O(H)


/*************************************************************************** C++ CODE ********************************************************************************/


struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
};
 

//Function to return the maximum difference between any node and its ancestor.
void solve(Node* root , int currMin, int currMax , int& ans ){
    // base case
    if(!root) return ;
    
    // extract the max value from the currMin and currMAx
    
    ans = max(ans,abs(root->data - currMin));
    ans = max(ans,abs(root->data - currMax));
    
    // now take preserv the currMin and currMAx for each node
    currMin = min(currMin,root->data);
    currMax = max(currMax,root->data);
    
    solve(root->left,currMin,currMax,ans);
    solve(root->right,currMin,currMax,ans);
    
    
}
int maxDiff(Node* root)
{
    // Your code here 
    
    int ans = 0 ;
    
    solve(root,root->data,root->data,ans);
    
    return ans ;
    
}


/*******************************************************************************THIS APPROACH WILL WORK *******************************************************/

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
};

int solve(Node* root , int& ans){
    // base case''
    if(!root) return INT_MAX ;
    
    // call and take left and right value minimum
    int left = solve(root->left,ans);
    int right = solve(root->right,ans);
    
    // now miximize the ans with left and right 
    ans = max(ans,max(root->data - left, root->data - right));
    // now return the min value to the root 
    
    return min(left,min(root->data,right));
    
}

int maxDiff(Node* root)
{
    // Your code here 
    
    
    int ans = INT_MIN ;
    
    solve(root,ans);
    
    return ans ;
    
}

/******************************************************************** Leetocode : 1026 Java Solution **************************************************************/

class Solution {
    // int ans = Integer.MIN_VALUE ;
    public int maxAncestorDiff(TreeNode root) {

        int ans = Dfs(root,root.val,root.val);

        return ans ;
    }
    
    private int Dfs(TreeNode root, int currMin, int currMax) {
        // Base case: if the current node is null, return the difference
        if (root == null) {
            return currMax - currMin;
        }

        // Update the current minimum and maximum values
        currMin = Math.min(currMin, root.val);
        currMax = Math.max(currMax, root.val);

        // Recur for the left and right subtrees
        int left = Dfs(root.left, currMin, currMax);
        int right = Dfs(root.right, currMin, currMax);

        // Return the maximum difference found in the left or right subtree
        return Math.max(left, right);
    }