Problem : Next greater Element 1 (leetcode : 496)

Problem statement : 




/************************************************************************** SOLUTION APPROACH ***************************************************************/


// OPTIMAL APPROACH \\  :O(N) space ad time 

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
     /// we are going to approach using data structure stack and hasmap 
     HashMap<Integer,Integer> hm = new HashMap<>(); // it store the greater value as key of num from nums2 , which w=will help to know in nums1 
     Stack<Integer> stk = new Stack<>();
     
     for(int num : nums2){
        while(!stk.isEmpty() && stk.peek() < num){
            hm.put(stk.pop(),num);
        }
        // if not then we push this num into the stk
        stk.push(num); // maintain increasing order
     }
     // now take a answer array and apply logic
     int ans[] = new int[nums1.length] ;

     for(int i = 0 ; i < nums1.length ; i++){
        ans[i] = hm.getOrDefault(nums1[i],-1);
     }

     // now we have the correct answer 

     return ans ;

      /* 

      // THIS IS WRONG APPROACH TO GO THROUGH THE PROBLEM 
      
       Stack<Integer> stk = new Stack<>();
        int n2 = nums2.length ;

        for(int i = n2-1 ; i >= 0 ; i--){
            stk.push(nums2[i]);
        }

        int n = nums1.length ;
        int ans[] = new int[n];
        Arrays.fill(ans,-1);

        for(int i = 0 ; i < n ; i++){
            while(!stk.isEmpty() && nums1[i] >= stk.peek()) stk.pop();
            if(!stk.isEmpty()) ans[i] = stk.pop();

        }

        return ans ;

        */


    }
}