Problem : Remove K Digits (  Leetcode 402 )

Problem Statement : 
Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

 
Example 1:
Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

Example 2:
Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.

Example 3:
Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.
 

Constraints:

1 <= k <= num.length <= 105
num consists of only digits.
num does not have any leading zeros except for the zero itself.


/*************************************************************************** C++ SOLUTION ***************************************************************************/


class Solution {
  public:
    string removeKdigits(string S, int K) {
        
        stack<char> stk ;
        string s ;
        for(int i = 0; i < S.size() ; i++){
            
            while(!stk.empty() && K > 0 && stk.top() > S[i]){
                stk.pop() ;
                K-- ;
            }
            
            stk.push(S[i]);
            
        }
        
         // If K is still greater than 0, remove elements from the back
        while (K > 0 && !stk.empty()) {
           stk.pop();
           K--;
        }
        
        while(!stk.empty()){   // make the final string
            s += stk.top();
            stk.pop();
        }
        
        reverse(s.begin(),s.end());
        
        // Remove leading zeros
        int i = 0;
        while (i < s.size() && s[i] == '0') i++;
       
         s = s.substr(i);   

         // If string is empty after removing leading zeros, return "0"
         
         return (s.empty()) ? "0" : s ;
        
    }
};


/************************************************************************* JAVA SOLUTION ****************************************************************************/

class Solution {
    public String removeKdigits(String num, int k) {
        Stack<Character> stk = new Stack<>();
        int n = num.length();
        for(int i = 0 ; i < n ; i++){
            while(!stk.isEmpty() && k > 0 && stk.peek() > num.charAt(i)){
                stk.pop();
                k-- ;
            }
            stk.push(num.charAt(i));
        }
        // remove the rest of the num if k is still greater than 0
        // and after take all the elemt of the stack take as string refrom in stringuilder
        StringBuilder ans = new StringBuilder();
        while(!stk.isEmpty()){
            if(k > 0){
                stk.pop();
                k-- ;
            }
            else{
                ans.insert(0,stk.pop()); // pop and insert at 0 in ans
            }
        }
        // now trim the leading zeros
        while(ans.length() > 0 && ans.charAt(0) == '0'){
            ans.deleteCharAt(0); // remove that 0th index 0 each time 
        }

        return ( ans.isEmpty() ) ? "0" : ans.toString() ; 
    }
}

