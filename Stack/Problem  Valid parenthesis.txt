Problem : Valid parenthesis

Problem Statement : 
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"

Output: true

Example 2:

Input: s = "()[]{}"

Output: true

Example 3:

Input: s = "(]"

Output: false

Example 4:

Input: s = "([])"

Output: true

 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.


/******************************************************************************* C++ CODE *************************************************************************/

class Solution {
  public:
    bool isBalanced(string& s) {
        // code here
        // Optimal Solution : O(N) using stack 
        
        stack<char> st ;
        for(int i = 0 ; i < s.size() ; i++){
            if(s[i] == '(' || s[i] == '{' || s[i] == '[') st.push(s[i]);
            
            else if(!st.empty() && ((st.top() == '(' && s[i] == ')') || (st.top() == '{' && s[i] == '}') ||
            (st.top() == '[' && s[i] == ']')))  st.pop(); 
            
            else return false ;
        }
        
        return st.empty() ; // if it get empty then result true otherwise false
        
    }
};

Time Taken : O(N) and Space :O(N)  


/********************************************************************************* JAVA CODE ***********************************************************************/


class Solution {
    public boolean isValid(String s) {
        Stack<Character> stk = new Stack<>();
  
        for(int i = 0 ; i < s.length() ; i++){
            char c = s.charAt(i) ;
            if(c == '(' || c == '{' || c == '['){
                stk.push(c);
            }
            else{
                // if stack is empty then return false 
                if(stk.isEmpty()) return false ;

                char top = stk.pop() ; // check the top of stack 
                if((c == ')' && top != '(')
                   || (c == '}' && top != '{' ) ||
                   (c == ']' && top != '[')){
                   // return true ;
                    return false ;
                   }
            }
        }
       // return true ; // stk.isEmpty() -> then we know the stack has empty 
        // then it return automatically 
     return stk.isEmpty() ;
       // return false ;
    }
}

/**********************************************************************************************************************************************************************/

