problem : Add minimum char to be string palindrome (day 19) : link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/string-gfg-160/problem/minimum-characters-to-be-added-at-front-to-make-string-palindrome

problem statement : 
Given a string s, the task is to find the minimum characters to be added at the front to make the string palindrome.

Note: A palindrome string is a sequence of characters that reads the same forward and backward.

Examples:

Input: s = "abc"
Output: 2
Explanation: Add 'b' and 'c' at front of above string to make it palindrome : "cbabc"
Input: s = "aacecaaaa"
Output: 2
Explanation: Add 2 a's at front of above string to make it palindrome : "aaaacecaaaa"

/*********************/
code : 
class Solution {
     
      static int[] computeLPSArray(String pat) {
        int n = pat.length();
        int[] lps = new int[n];

        // lps[0] is always 0
        lps[0] = 0;
        int len = 0;

        // loop calculates lps[i] for i = 1 to n-1
        int i = 1;
        while (i < n) {

            // If the characters match, increment len
            // and set lps[i]
            if (pat.charAt(i) == pat.charAt(len)) {
                len++;
                lps[i] = len;
                i++;
            }

            // If there is a mismatch
            else {

                // If len is not zero, update len to
                // the last known prefix length
                if (len != 0) {
                    len = lps[len - 1];
                }

                // No prefix matches, set lps[i] to 0
                else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    }

    // Method returns minimum character to be added at
    // front to make string palindrome
    static int minChar(String s) {
        int n = s.length();
        String rev
            = new StringBuilder(s).reverse().toString();

        // Get concatenation of string, special character
        // and reverse string
        s = s + "$" + rev;

        // Get LPS array of this concatenated string
        int[] lps = computeLPSArray(s);

        // By subtracting last entry of lps array from
        // string length, we will get our result
        return (n - lps[lps.length - 1]);

    
    

    
    
    
    
    /*
    // This is brute force Approach : O(N^2) time comp taken
    public static boolean isPalindrome(String s , int x , int y){
         boolean flag = true ;
         
         while(x < y){
             if(s.charAt(x) != s.charAt(y)){
                   flag = false ;
             }
             x++;
             y-- ;
         }
         return flag ;
    }
    public static int minChar(String s) {
        // Write your code here
        int i = s.length() - 1;
        int req = 0 ;
        // we are iterate from last of string and check all time is it palindrome or not , if not then we do req++ 
        
        while(i >= 0 && !isPalindrome(s,0,i)){
             i-- ;
             req++ ; // here we get exact minimum no of character we added into frunt then get entire string palindrome
        }
        return req ;
        
        
        */
        
        
    }
