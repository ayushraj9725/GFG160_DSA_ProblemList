Problem : Check for BST

Problem Statement : 
Given the root of a binary tree. Check whether it is a BST or not.
Note: We are considering that BSTs can not contain duplicate Nodes.
A BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Examples:

Input: root = [2, 1, 3, N, N, N, 5]
Output: true 
Explanation: The left subtree of every node contains smaller keys and right subtree of every node contains greater keys. Hence, the tree is a BST.

Input: root = [2, N, 7, N, 6, N, 9] 
Output: false 
Explanation: Since the node to the right of node with key 7 has lesser key value, hence it is not a valid BST.

Input: root = [10, 5, 20, N, N, 9, 25]
Output: false
Explanation: The node with key 9 present in the right subtree has lesser key value than root node.

Expected Complexities
Time Complexity : O(n)    Auxiliary Space : O(h)

/************************************************************************ CPP SOLUTION *******************************************************************************/

class Solution {
  public:
    // Function to check whether a Binary Tree is BST or not.
    void inorder(Node* root, vector<int> &tmp){
        // base case 
        if(!root) return ;
        
        inorder(root->left,tmp);
        tmp.push_back(root->data);
        inorder(root->right,tmp);
        
    }
    bool isBST(Node* root) {
        // Your code here
        if(!root->left && !root->right) return true ;
        vector<int> tmp ;
        inorder(root,tmp);
        // now check the array tmp is sorted or not if yes then wwe return true if not then false
        for(int i = 1 ; i < tmp.size() ;i++){
            if(tmp[i] < tmp[i-1]) return false ;
        }
        
        return true ;
    }
};

/************************************************************************ JAVA SOLUTION ***************************************************************************/

Leetcode : 98 Number

Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void inorder(TreeNode root ,List<Integer> tmp){
        // base case 
        if(root == null) return ;

        // call for the left childe
        inorder(root.left,tmp);

        // add value of root in to the list
        tmp.add(root.val);

        // call for the right child
        inorder(root.right,tmp) ;
    }
    public boolean isValidBST(TreeNode root) {
        // base case 
        if(root.left == null && root.right == null) return true ;

        List<Integer> tmp = new ArrayList<>();
        inorder(root,tmp);

        for(int i = 1 ; i < tmp.size() ; i++){
            if(tmp.get(i) < tmp.get(i-1)) return false ;
        }

        return true ;
    }
}

/**********************************************************************************************************************************************************************/