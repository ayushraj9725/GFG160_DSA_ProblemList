Problem : Closest Neighbour in BST


Problem Statement :
 Given the root of a binary search tree and a number k, find the greatest number in the binary search tree that is less than or equal to k.

Examples:

 

Input: root = [10, 7, 15, 2, 8, 11, 16], k = 14
Output: 11
Explanation: The greatest element in the tree which is less than or equal to 14, is 11.

Input: root = [5, 2, 12, 1, 3, 9, 21, N, N, N, N, N, N, 19, 25], k = 24
Output: 21
Explanation: The greatest element in the tree which is less than or equal to 24, is 21. 

Input: root = [5, 2, 12, 1, 3, 9, 21, N, N, N, N, N, N, 19, 25], k = 4
Output: 3
Explanation: The greatest element in the tree which is less than or equal to 4, is 3.

Constraints:
1 <= number of nodes <= 105
1 <= node->data, k <= 105

All nodes are unique in the BST
Expected Complexities

Time Complexity: O(h)
Auxiliary Space: O(h)


/*******************************************************************************    SOLUTIONS    ***********************************************************************/

Table of Content

[Naive Approach] Using Recursion - O(h) Time and O(h) Space



[Expected Approach] Using Iteration - O(h) Time and O(1) Space



// C++ code to find the largest value 
// smaller than or equal to k using recursion
#include <bits/stdc++.h>
using namespace std;

class Node {
public:
    int data;
    Node *left, *right;
  	
  	Node(int val){
      data = val;
      left = nullptr;
      right = nullptr;
    }
};

// function to find max value less than k
int findMaxFork(Node* root, int k) {
  
  	int result = -1;
  
    // Start from root and keep looking for larger  
    while (root != nullptr) {

        // If root is smaller go to right side
        if (root->data <= k){
          	result = root->data;
            root = root->right;
        }

        // If root is greater go to left side 
        else
            root = root->left;
    }
    
    return result;
}

int main() {
  
    int k = 24;

    // creating following BST
    //
    //             5
    //           /   \ 
    //         2     12
    //       /  \    /  \ 
    //      1    3  9   21
    //                 /   \  
    //                19   25
  	Node* root = new Node(5);
  	root->left = new Node(2);
  	root->left->left = new Node(1);
  	root->left->right = new Node(3);
  	root->right = new Node(12);
  	root->right->left = new Node(9);
  	root->right->right = new Node(21);
	root->right->right->left = new Node(19);
  	root->right->right->right = new Node(25);
  
    cout << findMaxFork(root, k);
    return 0;
}