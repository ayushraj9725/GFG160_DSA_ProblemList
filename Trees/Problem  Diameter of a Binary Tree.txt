Problem : Diameter of a Binary Tree

Problem Link ; https://www.geeksforgeeks.org/batch/gfg-160-problems/track/tree-gfg-160/problem/diameter-of-binary-tree

Problem Statement  :
Given a binary tree, the diameter (also known as the width) is defined as the number of edges on the longest path between two leaf nodes in the tree. This path may or may not pass through the root. Your task is to find the diameter of the tree.

Examples:

Input: root[] = [1, 2, 3]

Output: 2
Explanation: The longest path has 2 edges (node 2 -> node 1 -> node 3).

Input: root[] = [5, 8, 6, 3, 7, 9]

Output: 4
Explanation: The longest path has 4 edges (node 3 -> node 8 -> node 5 -> node 6 -> node 9).

Constraints:
1 ≤ number of nodes ≤ 105
0 ≤ node->data ≤ 105

Company Tags
Amazon  Microsoft  OYO Rooms

Expected Complexities
Time Complexity : O(n)         Auxiliary Space : O(h) for using recursion stack memory

/*********************************************************************************** CPP CODE **************************************************************************/

class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int val) {
        data = val;
        left = NULL;
        right = NULL;
    }
};

Node* newNode(int val) {
    return new Node(val);
}
*/

class Solution {
  public:
    int height(Node* root , int& ans){
        // base case : 
        if(!root) return 0 ; // if root get null then return 0 
        // otherwise make call for the left child and right child making root
        int lh = height(root -> left,ans);
        int rh = height(root -> right,ans);
        
        // update the ans by maximizing
        ans = max(ans,(lh+rh));
        
        return max(lh,rh) + 1 ;
        
    }
    int diameter(Node* root) {
        // Your code here
        // we use over here the recursive approach to find out the height of the left subpart and right subpart 
        // and add both of that and do maximize that 
        int ans = 0 ;
        height(root,ans);
        
        return ans ;
    }
};

/*********************************************************************************** JAVA CODE ***********************************************************************/

class Node {
    int data;
    Node left;
    Node right;
    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}
*/

class Solution {
    int height(Node root , int[] ans){
        // base case 
        if(root == null) return 0 ;
        
        // recursive call for making left and right child as root and found appropriate height
        int lh = height(root.left,ans);
        int rh = height(root.right,ans);
        // lets maximize the ans 
        ans[0] = Math.max(ans[0],lh+rh);
        
        return Math.max(lh,rh) + 1 ;
    }
    int diameter(Node root) {
        // Your code here
        
        //int ans = 0 ; 
        // lets make one size arr which store result 
        int ans[] = new int[1];
        height(root,ans); // we have to pass here ans for making changes remains 
                         // we have to pass it using referance but we have n ot pointer so we use int[] array
        
        return ans[0] ; // return the value at 0th index 
    }
}

/*************************************************************************************************************************************************************************/
