Problem : Fixing Two nodes of a BST

Problem link : https://www.geeksforgeeks.org/fix-two-swapped-nodes-of-bst/

Problem Statement : 
Given the root of a Binary search tree(BST), where exactly two nodes were swapped by mistake. Your task is to fix (or correct) the BST by swapping them back. Do not change the structure of the tree.
Note: It is guaranteed that the given input will form BST, except for 2 nodes that will be wrong. All changes must be reflected in the original Binary search tree(BST).
 
Examples :
Input: root = [10, 5, 8, 2, 20]     
Output: 1
Explanation: The nodes 20 and 8 were swapped. 

Input: root = [5, 10, 20, 2, 8]    
Output: 1 
Explanation: The nodes 10 and 5 were swapped.

Constraints:
1 ≤ Number of nodes ≤ 103

Company Tags
Amazon  Microsoft  Fact   Set  Walmart   BankBazaar


Time Complexity : O(N)    and Space Complexity : O(K)    


/**************************************************************** CPP CODE ***************************************************************************************/


// BRUTE FORCE APPROACH : USING INORDER TRAVERSAL AND SORTING  TIME  : O(N) + O(NLOGN) + O(N) and SPACE ALSO O(N) .   

CODE : 
// C++ program to correct the BST by replacing
// node values with sorted values

#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

class Node{
  public:
    int data;
    Node* left;
    Node* right;
    Node(int x){
        data = x;
        left = right = nullptr;
    }
};

// Function to store the inorder 
// traversal of the tree in a vector
void findInorder(Node* curr, vector<int>&inorder){
    if(curr == nullptr) return;
  
      // Recursively store left subtree
    findInorder(curr->left, inorder);
  
      // Store the current node's data
    inorder.push_back(curr->data);
  
      // Recursively store right subtree
    findInorder(curr->right, inorder);
}

// Recursive function to correct the BST by replacing
// node values with sorted values
void correctBSTUtil(Node* root, vector<int> &inorder, int &index){
    if(root == nullptr) return;
      
      // Recursively fill the left subtree
    correctBSTUtil(root->left, inorder, index);
  
      // Replace the current node's data with 
      // the correct value from the sorted array
    root->data = inorder[index];
    index++;
      
      // Recursively fill the right subtree
    correctBSTUtil(root->right, inorder, index);
}

// Function to fix the given BST where two nodes are swapped.
void correctBST(Node* root){
  
    // Vector to store the inorder traversal of the tree
    vector<int> inorder;
    findInorder(root, inorder);
  
      // Sort the vector to get the correct order of 
      // elements in a BST
    sort(inorder.begin(), inorder.end());
  
    int index = 0;
    correctBSTUtil(root, inorder, index);
}

// Print tree as level order
void printLevelOrder(Node *root) {
    if (root == nullptr) {
        cout << "N ";
        return;
    }

    queue<Node *> qq;
    qq.push(root);
    int nonNull = 1;

    while (!qq.empty() && nonNull > 0) {
        Node *curr = qq.front();
        qq.pop();

        if (curr == nullptr) {
            cout << "N ";
            continue;
        }
        nonNull--;

        cout << (curr->data) << " ";
        qq.push(curr->left);
        qq.push(curr->right);
        if (curr->left)
            nonNull++;
        if (curr->right)
            nonNull++;
    }
}

int main(){
  
    // Constructing the tree with swapped nodes
    //       6
    //     /  \
    //    10   2
    //   / \  / \
    //  1  3 7  12
    // Here, 10 and 2 are swapped
  
    Node *root = new Node(6);
    root->left = new Node(10);
    root->right = new Node(2);
    root->left->left = new Node(1);
    root->left->right = new Node(3);
    root->right->right = new Node(12);
    root->right->left = new Node(7);

    correctBST(root);
    printLevelOrder(root);
 
    return 0;
}

 ////////////////////////////////////////////////////////////////////////////////  OPTIMIZED APPROACH  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

// Recursive Function for inorder traversal to find out 
// the two swapped nodes.
void correctBSTUtil(Node* root, Node* &first, Node* &middle, 
                                  Node* &last, Node* &prev) {
    if (root == nullptr)
        return;

    // Recur for the left subtree
    correctBSTUtil(root->left, first, middle, last, prev);

    // If this node is smaller than the previous node, 
    // it's violating the BST rule.
    if (prev && root->data < prev->data) {
      
        // If this is the first violation, mark these 
        // two nodes as 'first' and 'middle'
        if (!first) {
            first = prev;
            middle = root;
        }
      
        // If this is the second violation, 
        // mark this node as last
        else
            last = root;
    }

    // Mark this node as previous
    prev = root;

    // Recur for the right subtree
    correctBSTUtil(root->right, first, middle, last, prev);
}

// Function to fix the given BST, where two nodes are swapped.
void correctBST(Node *root) {
      
    // Initialize pointers needed for correctBSTUtil()
    Node *first = nullptr, *middle = nullptr, 
         *last = nullptr, *prev = nullptr;

    // Set the pointers to find out two nodes
    correctBSTUtil(root, first, middle, last, prev);

    // Fix (or correct) the tree
    if (first && last)
        swap(first->data, last->data);
    else if (first && middle)
        swap(first->data, middle->data);
}

/***************************************************************** JAVA CODE ***************************************************************************************/

// Java code for correcting a BST where two nodes are swapped,
// Using recursion

import java.util.*;

class Node {
    int data;
    Node left, right;

    Node(int val) {
        data = val;
        left = null;
        right = null;
    }
}

class GfG {
      static void swap(Node a, Node b) {
        int temp = a.data;
        a.data = b.data;
        b.data = temp;
    }

    // Recursive Function for inorder traversal to find out 
    // the two swapped nodes.
    static void correctBSTUtil(Node root, Node[] first, Node[] middle, 
                                Node[] last, Node[] prev) {
        if (root == null)
            return;

        // Recur for the left subtree
        correctBSTUtil(root.left, first, middle, last, prev);

        // If this node is smaller than the previous node, 
        // it's violating the BST rule.
        if (prev[0] != null && root.data < prev[0].data) {

            // If this is the first violation, mark these 
            // two nodes as 'first' and 'middle'
            if (first[0] == null) {
                first[0] = prev[0];
                middle[0] = root;
            }

            // If this is the second violation, 
            // mark this node as last
            else
                last[0] = root;
        }

        // Mark this node as previous
        prev[0] = root;

        // Recur for the right subtree
        correctBSTUtil(root.right, first, middle, last, prev);
    }

    // Function to fix the given BST, where two nodes are swapped.
    static void correctBST(Node root) {
        // Initialize pointers needed for correctBSTUtil()
        Node[] first = {null}, middle = {null}, 
               last = {null}, prev = {null};

        // Set the pointers to find out two nodes
        correctBSTUtil(root, first, middle, last, prev);

        // Fix (or correct) the tree
        if (first[0] != null && last[0] != null)
            swap(first[0], last[0]);
        else if (first[0] != null && middle[0] != null)
            swap(first[0], middle[0]);
    }

    // Print tree as level order
    static void printLevelOrder(Node root) {
        if (root == null) {
            System.out.print("N ");
            return;
        }

        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        int nonNull = 1;

        while (!queue.isEmpty() && nonNull > 0) {
            Node curr = queue.poll();

            if (curr == null) {
                System.out.print("N ");
                continue;
            }
            nonNull--;

            System.out.print(curr.data + " ");
            queue.add(curr.left);
            queue.add(curr.right);
            if (curr.left != null)
                nonNull++;
            if (curr.right != null)
                nonNull++;
        }
    }

    public static void main(String[] args) {
        // Constructing the tree with swapped nodes
        //       6
        //     /  \
        //    10   2
        //   / \  / \
        //  1  3 7  12
        // Here, 10 and 2 are swapped

        Node root = new Node(6);
        root.left = new Node(10);
        root.right = new Node(2);
        root.left.left = new Node(1);
        root.left.right = new Node(3);
        root.right.right = new Node(12);
        root.right.left = new Node(7);

        correctBST(root);
        printLevelOrder(root);
    }
}



/**********************************************************************************************************************************************************************/

