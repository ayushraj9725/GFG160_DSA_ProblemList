Problem : Inorder Traversal 

Problem Statement : 
Given a Binary Tree, your task is to return its In-Order Traversal.

An inorder traversal first visits the left child (including its entire subtree), then visits the node, and finally visits the right child (including its entire subtree).

Examples:

Input: root[] = [1, 2, 3, 4, 5] 
      
Output: [4, 2, 5, 1, 3]
Explanation: The in-order traversal of the given binary tree is [4, 2, 5, 1, 3].
Input: root[] = [8, 1, 5, N, 7, 10, 6, N, 10, 6]
      
Output: [1, 7, 10, 8, 6, 10, 5, 6]
Explanation: The in-order traversal of the given binary tree is [1, 7, 10, 8, 6, 10, 5, 6].
Constraints:
1 <= number of nodes <= 105
0 <= node->data <= 105

Company Tags
Amazon   Snapdeal   Adobe


Expected Complexities
Time Complexity : O(n)    Auxiliary Space : O(1)

/*********************************************************************************************************************************************************************/

Solution :

//C++ CODE
class Solution {
  public:
    void inorder(Node* root,vector<int>&ans){
        //base case
        if(!root) return;
        //recursive case;
        inorder(root->left,ans);
        ans.push_back(root->data);
        inorder(root->right,ans);
    }
    vector<int> inOrder(Node* root) {
        //CodeGenius
        vector<int>ans;
        inorder(root,ans);
        return ans;
    }
};

/***********************************************************************************************************************************************************************/
//JAVA CODE
class Solution {
    
    void inorder(Node root,ArrayList<Integer> in){
        if(root == null) return;
        inorder(root.left,in);
        in.add(root.data);
        inorder(root.right,in);
    }
    ArrayList<Integer> inOrder(Node root) {
        // CodeGenius
        ArrayList<Integer> in =  new ArrayList<>();
        inorder(root,in);
        return in;
    }
}