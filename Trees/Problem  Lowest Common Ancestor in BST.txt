Problem : Lowest Common Ancestor in a BST

Problem Link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/tree-gfg-160/problem/lowest-common-ancestor-in-a-bst

Problem Statement : 
Given a Binary Search Tree (with all values unique) and two nodes n1 and n2 (n1 != n2). You may assume that both nodes exist in the tree. Find the Lowest Common Ancestor (LCA) of the given two nodes in the BST.
LCA between two nodes n1 and n2 is defined as the lowest node that has both n1 and n2 as descendants (where we allow a node to be a descendant of itself).

Examples:
Input: root = [5, 4, 6, 3, N, N, 7, N, N, N, 8], n1 = 7, n2 = 8  
Output: 7
Explanation: 7 is the closest node to both 7 and 8, which is also an ancestor of both the nodes.

Input: root = [20, 8, 22, 4, 12, N, N, N, N, 10, 14], n1 = 8, n2 = 14           
Output: 8
Explanation: 8 is the closest node to both 8 and 14, which is also an ancestor of both the nodes.


Input: root = [2, 1, 3], n1 = 1, n2 = 3        
Output: 2
Explanation: 2 is the closest node to both 1 and 3, which is also an ancestor of both the nodes.


Constraints:
1 <= number of nodes <= 105
1 <= node->data <= 105
1 <= n1, n2 <= 105

Company Tags
Flipkart  Accolite   Amazon   Microsoft   Samsung   MAQ Software   Synopsys  

Expected Complexities

Time Complexity  : O(h)   Auxiliary Space  : O(1)

/*************************************************************************** CODE CPP *******************************************************************************/


class Node {
  public:
    int data;
    Node* left;
    Node* right;

    // Constructor to initialize a new node
    Node(int val) {
        data = val;
        left = NULL;
        right = NULL;
    }
};


class Solution {
  public:
    Node* LCA(Node* root, Node* n1, Node* n2) {
        // code here
        // base case 
        if(!root) return root ;
        
        // now check the condition 
        if(root->data < n1 -> data && root-> data < n2 -> data){ // then we know the ancestor be in the right using bst propery
            return LCA(root->right,n1,n2); // make call for the right subtree
        }
        else if(root->data > n1->data && root-> data > n2->data){ // both are small from the root that means it be in left of BST
            return LCA(root->left,n1,n2);
        }
        // except both of case the result will be the root
        // so return root simple now
        else return root ;
        
        
    }
};



/*************************************************************************** JAVA CODE *******************************************************************************/

 public class TreeNode {
     int val;
     TreeNode left;
     TreeNode right;
     TreeNode(int x) { val = x; }
 }


class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null) return root ;

        if(root.val < p.val && root.val < q.val) return lowestCommonAncestor(root.right,p,q);
        else if(root.val > p.val && root.val > q.val) return lowestCommonAncestor(root.left,p,q);
        else return root ;
    }
}



/**************************************************************************************************************************************************************************/