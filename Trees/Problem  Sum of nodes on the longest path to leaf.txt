Problem : Sum of nodes on the longest path

Problem Statement :

Given a binary tree root[], you need to find the sum of the nodes on the longest path from the root to any leaf node. If two or more paths have the same length, the path with the maximum sum of node values should be considered.

Examples:

Input: root[] = [4, 2, 5, 7, 1, 2, 3, N, N, 6, N]
Output: 13
Explanation:
The highlighted nodes (4, 2, 1, 6) above are part of the longest root to leaf path having sum = (4 + 2 + 1 + 6) = 13

Input: root[] = [1, 2, 3, 4, 5, 6, 7]
Output: 11
Explanation: 
The longest root-to-leaf path is 1 -> 3 -> 7, with sum 11.

Input: root[] = [10, 5, 15, 3, 7, N, 20, 1]
Output: 19
Explanation: 
The longest root-to-leaf path is 10 -> 5 -> 3 -> 1 with a sum of 10 + 5 + 3 + 1 = 19.

Constraints:
1 <= number of nodes <= 106
0 <= node->data <= 104

Expected Complexities
Time Complexity: O(n)
Auxiliary Space: O(n)



/****************************************************************************  SOLUTIONS  **************************************************************************/



/////////////    OPTIMAL SOLUTION USING THE DFS   //////////////////


#include <bits/stdc++.h>
using namespace std;

class Node {
  	
  	public:
    int data;
    Node* left, *right;
  	Node(int x) {
     	data = x; 
      	left = right = nullptr;
    }
};

void sumOfRootToLeaf(Node* root, int sum, int len, 
                     int& maxLen, int& maxSum) {
  
    // Base case: if the current node is null
    if (!root) {
      
        // Checking if the current path has a longer length 
        // and update maxLen and maxSum accordingly
        if (len > maxLen) {
            maxLen = len;
            maxSum = sum;
        }
        // If the lengths are equal, check if the current sum is 
        // greater and update maxSum if necessary
        else if (len == maxLen && sum > maxSum) {
            maxSum = sum;
        }
        return;
    }

    // Recursively calculating the sum of
    // the left and right subtrees
    sumOfRootToLeaf(root->left, sum + root->data, len + 1, maxLen, maxSum);
    sumOfRootToLeaf(root->right, sum + root->data, len + 1, maxLen, maxSum);
}

// Function to calculate the sum of the longest root to leaf path
int sumOfLongRootToLeafPath(Node* root) {
  
    // Base case: if the tree is empty
    if (!root) return 0;

    // Initializing the variables to store the maximum length and sum
    int maxSum = INT_MIN, maxLen = 0;

    // Calling the utility function
    sumOfRootToLeaf(root, 0, 0, maxLen, maxSum);

    // Returning the maximum sum
    return maxSum;
}


int main() {
  
    // binary tree formation
    //        4
    //       / \ 
    //      2   5
    //     / \ 
    //    1   3 
    Node* root = new Node(4);
    root->left = new Node(2);
    root->right = new Node(5);
    root->left->left = new Node(1);
    root->left->right = new Node(3);

    cout << sumOfLongRootToLeafPath(root);

    return 0;
}