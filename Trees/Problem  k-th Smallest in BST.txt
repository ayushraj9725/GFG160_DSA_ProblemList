Problem : k-th Smallest in BST

Problem Statement : 
Given a BST and an integer k, the task is to find the kth smallest element in the BST. If there is no kth smallest element present then return -1.

Examples:
Input: root = [2, 1, 3], k = 2
Output: 2
Explanation: 2 is the 2nd smallest element in the BST.

Input: root = [2, 1, 3], k = 5  
Output: -1
Explanation: There is no 5th smallest element in the BST as the size of BST is 3.

Input: root = [20, 8, 22, 4, 12, N, N, N, N, 10, 14], k = 3    
Output: 10
Explanation: 10 is the 3rd smallest element in the BST.

Constraints:

1 <= number of nodes, k <= 105
1 <= node->data <= 105

Company Tags
Accolite   Amazon   Google


Expected Complexities
Time Complexity  : O(n)   Auxiliary Space  : O(1)  


/************************************************************************************* CPP SOLUTION CODE **********************************************************/

struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/

class Solution {
  public:
    // Return the Kth smallest element in the given BST
    void inorder(Node *root , vector<int> &tmp){
        // base case 
        if(!root ) return ;
        
        // call recursivly and stored root value 
        inorder(root->left,tmp); // call 1st for the left node child
        
        tmp.push_back(root->data); // insert data of root into the tmp list
        
        inorder(root->right,tmp); // now make call for the right child of the node 
    }
    int kthSmallest(Node *root, int k) {
        // add code here.
        // we can do it by some how all the node element we can hold on in sorted form 
        // yes this thing we can do using inorder traversal of binary tree 
        
        vector<int> tmp ;
        inorder(root,tmp);
       
       
        if(tmp.size() < k) return -1 ;
        
        return tmp[k-1] ;

     OR  

        // now traverse the tmp and return the kth element from initial bcz we want kth smallest
        for(int i = 0 ; i < tmp.size() ; i++){
            if(tmp[i] == k) return tmp[i] ;
        }
        
        // otherwise we return -1 we have not got answer 
        return -1 ;
    }

/****************************************************************************** OPTIMIZED CODE ********************************************************************/

class Solution {
public:
    void inorder(TreeNode *root , int &k , int &ans){
        // base case 
        if(!root ) return ;
        
        // call recursivly and stored root value 
        inorder(root->left,k,ans); // call 1st for the left node child
        k-- ; 
        if(k == 0) {
            ans = root->val ;
            return ;
        }
        inorder(root->right,k,ans); // now make call for the right child of the node 
    }
    int kthSmallest(TreeNode* root, int k) {
        
        int ans = -1 ;
        inorder(root,k,ans);
        return ans ;
    }
};

/**************************************************************************************** JAVA CODE *******************************************************************/

LeetCode Problem : 230 

 public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    void inorder(TreeNode root, List<Integer> tmp ){
        // base case 
        if(root == null) return ;

        // recursive case and call 

        inorder(root.left,tmp);
        tmp.add(root.val);
        inorder(root.right,tmp);

    }
    public int kthSmallest(TreeNode root, int k) {
        List<Integer> tmp = new ArrayList<>();
        inorder(root,tmp);

        // for(int i = 0 ; i < tmp.size() ; i++){
        //    // if(tmp.get(i) == k) return tmp.get(i) ; // not pass at all cases
           
        // }\

        if(tmp.size() < k) return -1 ;
        
        return tmp.get(k-1);       

        //return -1 ;
    }
}

/**************************************************************************************************************************************************************************/
