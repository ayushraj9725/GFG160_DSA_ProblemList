Problem : Count all triplets with given sum in sorted array
Problem Link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/two-pointer-technique-gfg-160/problem/count-all-triplets-with-given-sum-in-sorted-array

Problem Statement :
Given a sorted array arr[] and a target value, the task is to count triplets (i, j, k) of valid indices, such that arr[i] + arr[j] + arr[k] = target and i < j < k.

Examples:

Input: arr[] = [-3, -1, -1, 0, 1, 2], target = -2
Output: 4
Explanation: Two triplets that add up to -2 are:
arr[0] + arr[3] + arr[4] = (-3) + 0 + (1) = -2
arr[0] + arr[1] + arr[5] = (-3) + (-1) + (2) = -2
arr[0] + arr[2] + arr[5] = (-3) + (-1) + (2) = -2
arr[1] + arr[2] + arr[3] = (-1) + (-1) + (0) = -2

Input: arr[] = [-2, 0, 1, 1, 5], target = 1
Output: 0
Explanation: There is no triplet whose sum is equal to 1. 
/***************
Constraints:
3 ≤ arr.size() ≤ 103
-105 ≤ arr[i], target ≤ 105
/***************/

SOLUTION FOR THIS PROBLEM    : :::::::::::::::::  :        / ********************* C++ CODE ******************** /

class Ayush {
 public:
    int countTriplets(vector<int> &arr, int target) {
        // Code Here
        int n = arr.size() ;
        int count = 0 ;
        for(int i = 0 ; i < n - 2 ; i++){
            // takes two pointer 
            int j = i + 1 , k = n - 1 ;
            // calculate sum 
            while(j < k){
               int sum = arr[i] + arr[j] + arr[k] ;
                if(sum < target) j++ ; // left increment 
                else if(sum > target) k-- ; // right decrement 
                
                else if(sum == target){
                    count++ ;
                   // j++ ;
                    int temp = j + 1 ;
                    while(temp < k && arr[temp] == arr[temp-1]){
                        count++ ;
                        temp++ ;
                    }
                    // while(j < k && arr[k] == arr[k+1]){
                    //     k-- ;
                    //     count++ ;
                    // }
                    k-- ;
                }
            }    
        }
        return count ;
        
      /*  int n = arr.size() ;
        int count = 0 ;
        for(int i = 0 ; i < n ; i++){
            for(int j = i + 1 ; j < n ; j++){
                for(int k = j + 1 ; k < n ; k++){
                    if(arr[i] + arr[j] + arr[k] == target) count++ ;
                }
            }
        }
        return count ;
      */
      
        // time complexity : O(N^3) : time limit exceed 
    }
};

                                                /****************** JAVA CODE ******************/

// Java program to count all triplets having sum equal to
// target by exploring all possible triplets

import java.util.*;
class GfG {

    // Function to count triplets whose sum equals the target
    static int countTriplets(int[] arr, int target) {
        int n = arr.length;
        int res = 0;

        // Iterate through each element as the first element
        // of the triplet
        for (int i = 0; i < n - 2; i++) {
            int left = i + 1, right = n - 1;

            // Use two-pointer approach to find triplets
            while (left < right) {

                // Calculate the sum of the triplet
                int sum = arr[i] + arr[left] + arr[right];

                // If sum is smaller, move to bigger values
                if (sum < target) {
                    left += 1;
                }
                
                // If sum is greater, move to smaller values
                else if (sum > target) {
                    right -= 1;
                }
                
                // If sum is equal, check for frequency of elements
                else if (sum == target) {
                    int ele1 = arr[left], ele2 = arr[right];
                    int cnt1 = 0, cnt2 = 0;

                    // Count frequency of the current value at 'left'
                    while (left <= right && arr[left] == ele1) {
                        left++;
                        cnt1++;
                    }

                    // Count frequency of the current value at 'right'
                    while (left <= right && arr[right] == ele2) {
                        right--;
                        cnt2++;
                    }

                    // If both the elements are the same, then count 
                    // of pairs = the number of ways to choose 2 
                    // elements among cnt1 elements
                    if (ele1 == ele2)
                        res += (cnt1 * (cnt1 - 1)) / 2;

                    // If the elements are different, then count of  
                    // pairs = product of the count of both elements
                    else
                        res += (cnt1 * cnt2);
                }
            }
        }
        return res;
    }

    public static void main(String[] args) {
        int[] arr = {-3, -1, -1, 0, 1, 2};
        int target = -2;

        System.out.println(countTriplets(arr, target));
    }
}

             /**************************************************************************************************************************/