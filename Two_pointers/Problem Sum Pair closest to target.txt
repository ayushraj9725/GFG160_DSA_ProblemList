Problem : Sum Pair closest to targe
Problem Link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/two-pointer-technique-gfg-160/problem/pair-in-array-whose-sum-is-closest-to-x1124

Problem Statement : 
Given an array arr[] and a number target, find a pair of elements (a, b) in arr[], where a<=b whose sum is closest to target.
Note: Return the pair in sorted order and if there are multiple such pairs return the pair with maximum absolute difference. If no such pair exists return an empty array.

Examples:

Input: arr[] = [10, 30, 20, 5], target = 25
Output: [5, 20]
Explanation: As 5 + 20 = 25 is closest to 25.
Input: arr[] = [5, 2, 7, 1, 4], target = 10
Output: [2, 7]
Explanation: As (4, 7) and (2, 7) both are closest to 10, but absolute difference of (2, 7) is 5 and (4, 7) is 3. Hence, [2, 7] has maximum absolute difference and closest to target. 
Input: arr[] = [10], target = 10
Output: []
Explanation: As the input array has only 1 element, return an empty array.
///////////////////////
Constraints:
1 <= arr.size() <= 2*105
0 <= target<= 2*105
0 <= arr[i] <= 105
///////////////////////

Code Solution : :::::::::::::::::::::::::::::::::::::: /************************* C++ CODE ************************/

C++ Code Solution : 
class Solution {
 public:
    vector<int> sumClosest(vector<int>& arr, int target) {
        // code here
        
        // Optimal Solution : Using Two Pointer Approach and sorting 
        int n = arr.size() ;
        vector<int> ans ;
        int minDiff = INT_MAX ;
        // before apply two pointer we have to sort the array 
        sort(arr.begin(),arr.end()) ;
        
        // now second step to apply two pointers 
        int i = 0 , j = n - 1 ;
        while(i < j){
            int sum = arr[i] + arr[j] ;
            
            // check if sum - target is less then minDiff then we update it and set in the ans 
            if(abs(sum - target) < minDiff){
                minDiff = abs(sum - target) ;
                ans = { arr[i] , arr[j] } ;
            }
            // if sum is less than target then move the left pointers i
            else if(sum < target){
                i++ ;
            }
            // if sum is greater than target then move the right pointer 
            else if(sum > target) j-- ;
            // if found sum == target then return the res
            else return ans ; // ans has stored initially in the ans if sum - target when checked 
        }
        return ans  ; // again return the closest sum pairs 
        // time complexity : O(nlogn + n) ans Space : O(1)
        
      /*  // brute force solution 
        vector<int> ans ;
        int n = arr.size() ;
        // generating all the pairs possible 
        int minDiff = INT_MAX ;
        for(int i = 0 ; i < n - 1 ; i++){
            for(int j = i + 1 ; j < n ; j++){
                int sum = arr[i] + arr[j] ;
                int currDiff = abs(sum  - target) ;
                // if currdiff is less than min diff that mean it indicate that pairs is closet to the target
                if(currDiff < minDiff){
                    minDiff = currDiff ;
                    ans = { min(arr[i],arr[j]) , max(arr[i],arr[j]) } ;
                }
                // if currdiff is equal to mindiff then check the absolute diff
                else if(minDiff == currDiff && (ans[1] - ans[0] < abs(arr[i] - arr[j]))){
                    ans = { min(arr[i],arr[j]) , max(arr[i],arr[j]) } ;                    
                }
            }
        }
      //  sort(ans.begin(),ans.end());
        
        return ans ; // time complexity : O(N*N) with space : O(1)
        
        // Better solution using the binary search : (2nlogn) with space O(1) space 
        */
        
        
    }
};

/ ************************************************************************************************************************************* /
