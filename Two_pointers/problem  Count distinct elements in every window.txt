problem : Count distinct elements in every window

Problem Link : https://www.geeksforgeeks.org/batch/gfg-160-problems/track/two-pointer-technique-gfg-160/problem/count-distinct-elements-in-every-window

Problem Statement  :
Given an integer array arr[] and a number k. Find the count of distinct elements in every window of size k in the array.

Examples:

Input: arr[] = [1, 2, 1, 3, 4, 2, 3], k = 4
Output:  [3, 4, 4, 3]
Explanation: Window 1 of size k = 4 is 1 2 1 3. Number of distinct elements in this window are 3. 
Window 2 of size k = 4 is 2 1 3 4. Number of distinct elements in this window are 4.
Window 3 of size k = 4 is 1 3 4 2. Number of distinct elements in this window are 4.
Window 4 of size k = 4 is 3 4 2 3. Number of distinct elements in this window are 3.

Input: arr[] = [4, 1, 1], k = 2
Output: [2, 1]
Explanation: Window 1 of size k = 2 is 4 1. Number of distinct elements in this window are 2. 
Window 2 of size k = 2 is 1 1. Number of distinct elements in this window is 1. 

Input: arr[] = [1, 1, 1, 1, 1], k = 3
Output: [1, 1, 1]
/////////////////////////////////
Constraints:
1 <= k <= arr.size() <= 105
1 <= arr[i] <= 105
////////////////////////////////

PROBLEM SOLUTION : // : :::::::::::::::::::::::::::::::::::::::::: :  C++ CODE : :::::::::::::::::::::::::::::::::::::::::::: : \\
class Solution {
  public:
    vector<int> countDistinct(vector<int> &arr, int k) {
        // code here.
        int n = arr.size() ;
        vector<int> res ;
        unordered_map<int,int> freq ;
        
        for(int i = 0 ; i < k ; i++){
            freq[arr[i]] += 1 ;
        }
        
            res.push_back(freq.size());
            for(int i = k ; i < n ;i++){
                freq[arr[i]] += 1 ;
                freq[arr[i-k]] -= 1 ;
                
                if(freq[arr[i - k]] == 0) {
                    freq.erase(arr[i-k]);
                }
                res.push_back(freq.size()) ;
            }
          return res ; // time complexity : O(N) and space complexity : O(N) for map 
          // Brute force using hashset all the unique elemnt add each time checking 
    }
};

// OPTIMAL ANSWER WHEN READ SLIDING WINDOWS THEN WE REVISE THIS PROBLEM 

  / ****************************************************************** JAVA CODE ******************************************************//

// Java program to count distinct elements in every window
// of size k by traversing all windows of size k

import java.util.*;

class GfG {

    // Function to count distinct elements in every window of size k
    static List<Integer> countDistinct(int[] arr, int k) {
        int n = arr.length;  
        ArrayList<Integer> res = new ArrayList<>();
        Map<Integer, Integer> freq = new HashMap<>();
      
        // Store the frequency of elements of the first window
        for (int i = 0; i < k; i++) {
            freq.put(arr[i], freq.getOrDefault(arr[i], 0) + 1);
        }
      
        // Store the count of distinct elements of the first window
        res.add(freq.size());
      
        for (int i = k; i < n; i++) {
            freq.put(arr[i], freq.getOrDefault(arr[i], 0) + 1);
            freq.put(arr[i - k], freq.get(arr[i - k]) - 1);
          
            // If the frequency of arr[i - k] becomes 0, 
            // remove it from the hash map
            if (freq.get(arr[i - k]) == 0) {
                freq.remove(arr[i - k]);
            }
          
            res.add(freq.size());
        }
      
        return res;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 1, 3, 4, 2, 3};
        int k = 4;

        List<Integer> res = countDistinct(arr, k);
        for (int ele : res) {
            System.out.print(ele + " ");
        }
    }
}



// ***************************************************************** BRUTE FORCE JAVA CODE ********************************************//
// Java program to count distinct elements in every window
// of size k by traversing all windows of size k

import java.util.*;

class GfG {
    static ArrayList<Integer> countDistinct(int[] arr, int k) {
        int n = arr.length;  
        ArrayList<Integer> res = new ArrayList<>();
      
        // Iterate over every window
        for (int i = 0; i <= n - k; i++) {
          
            // Hash Set to count unique elements
            HashSet<Integer> st = new HashSet<>();
            for(int j = i; j < i + k; j++)
                st.add(arr[j]);
          
            // Size of set denotes the number of unique elements
            // in the window
            res.add(st.size());
        }
        return res;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 1, 3, 4, 2, 3};
        int k = 4;

        ArrayList<Integer> res = countDistinct(arr, k);
        for(int ele: res)
            System.out.print(ele + " ");
    }
}
/*******************************************************************************************************************************/

